// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "operations.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Expression_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Expression_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Expression_Operator_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ScanOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanOperation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ScanOperation_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ComputeOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComputeOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilterOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Aggregation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Aggregation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Aggregation_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupByOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupByOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Operation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_operations_2eproto() {
  protobuf_AddDesc_operations_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "operations.proto");
  GOOGLE_CHECK(file != NULL);
  Expression_descriptor_ = file->message_type(0);
  static const int Expression_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expression, operator__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expression, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expression, constant_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expression, constant_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expression, constant_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expression, column_id_),
  };
  Expression_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Expression_descriptor_,
      Expression::default_instance_,
      Expression_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expression, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expression, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Expression));
  Expression_Operator_descriptor_ = Expression_descriptor_->enum_type(0);
  ScanOperation_descriptor_ = file->message_type(1);
  static const int ScanOperation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanOperation, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanOperation, type_),
  };
  ScanOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanOperation_descriptor_,
      ScanOperation::default_instance_,
      ScanOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanOperation));
  ScanOperation_Type_descriptor_ = ScanOperation_descriptor_->enum_type(0);
  ComputeOperation_descriptor_ = file->message_type(2);
  static const int ComputeOperation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeOperation, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeOperation, expressions_),
  };
  ComputeOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComputeOperation_descriptor_,
      ComputeOperation::default_instance_,
      ComputeOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComputeOperation));
  FilterOperation_descriptor_ = file->message_type(3);
  static const int FilterOperation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterOperation, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterOperation, expression_),
  };
  FilterOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilterOperation_descriptor_,
      FilterOperation::default_instance_,
      FilterOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilterOperation));
  Aggregation_descriptor_ = file->message_type(4);
  static const int Aggregation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aggregation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aggregation, aggregated_column_),
  };
  Aggregation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Aggregation_descriptor_,
      Aggregation::default_instance_,
      Aggregation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aggregation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aggregation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Aggregation));
  Aggregation_Type_descriptor_ = Aggregation_descriptor_->enum_type(0);
  GroupByOperation_descriptor_ = file->message_type(5);
  static const int GroupByOperation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupByOperation, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupByOperation, group_by_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupByOperation, aggregations_),
  };
  GroupByOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupByOperation_descriptor_,
      GroupByOperation::default_instance_,
      GroupByOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupByOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupByOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupByOperation));
  Operation_descriptor_ = file->message_type(6);
  static const int Operation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, scan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, compute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, group_by_),
  };
  Operation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Operation_descriptor_,
      Operation::default_instance_,
      Operation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Operation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_operations_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Expression_descriptor_, &Expression::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanOperation_descriptor_, &ScanOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComputeOperation_descriptor_, &ComputeOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilterOperation_descriptor_, &FilterOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Aggregation_descriptor_, &Aggregation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupByOperation_descriptor_, &GroupByOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Operation_descriptor_, &Operation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_operations_2eproto() {
  delete Expression::default_instance_;
  delete Expression_reflection_;
  delete ScanOperation::default_instance_;
  delete ScanOperation_reflection_;
  delete ComputeOperation::default_instance_;
  delete ComputeOperation_reflection_;
  delete FilterOperation::default_instance_;
  delete FilterOperation_reflection_;
  delete Aggregation::default_instance_;
  delete Aggregation_reflection_;
  delete GroupByOperation::default_instance_;
  delete GroupByOperation_reflection_;
  delete Operation::default_instance_;
  delete Operation_reflection_;
}

void protobuf_AddDesc_operations_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020operations.proto\"\201\003\n\nExpression\022&\n\010ope"
    "rator\030\001 \002(\0162\024.Expression.Operator\022\035\n\010chi"
    "ldren\030\002 \003(\0132\013.Expression\022\026\n\016constant_int"
    "32\030\n \001(\005\022\027\n\017constant_double\030\013 \001(\001\022\025\n\rcon"
    "stant_bool\030\014 \001(\010\022\021\n\tcolumn_id\030\r \001(\005\"\320\001\n\010"
    "Operator\022\014\n\010CONSTANT\020\001\022\n\n\006COLUMN\020\002\022\006\n\002IF"
    "\020\003\022\007\n\003ADD\020d\022\014\n\010SUBTRACT\020e\022\014\n\010MULTIPLY\020f\022"
    "\023\n\017FLOATING_DIVIDE\020g\022\010\n\003LOG\020\226\001\022\013\n\006NEGATE"
    "\020\227\001\022\n\n\005LOWER\020\310\001\022\014\n\007GREATER\020\311\001\022\n\n\005EQUAL\020\312"
    "\001\022\016\n\tNOT_EQUAL\020\313\001\022\010\n\003NOT\020\254\002\022\007\n\002OR\020\255\002\022\010\n\003"
    "AND\020\256\002\"i\n\rScanOperation\022\016\n\006column\030\001 \003(\005\022"
    "!\n\004type\030\002 \003(\0162\023.ScanOperation.Type\"%\n\004Ty"
    "pe\022\007\n\003INT\020\001\022\n\n\006DOUBLE\020\002\022\010\n\004BOOL\020\003\"P\n\020Com"
    "puteOperation\022\032\n\006source\030\001 \002(\0132\n.Operatio"
    "n\022 \n\013expressions\030\002 \003(\0132\013.Expression\"N\n\017F"
    "ilterOperation\022\032\n\006source\030\001 \002(\0132\n.Operati"
    "on\022\037\n\nexpression\030\002 \002(\0132\013.Expression\"e\n\013A"
    "ggregation\022\037\n\004type\030\001 \002(\0162\021.Aggregation.T"
    "ype\022\031\n\021aggregated_column\030\002 \001(\005\"\032\n\004Type\022\007"
    "\n\003SUM\020\001\022\t\n\005COUNT\020\002\"k\n\020GroupByOperation\022\032"
    "\n\006source\030\001 \002(\0132\n.Operation\022\027\n\017group_by_c"
    "olumn\030\003 \003(\005\022\"\n\014aggregations\030\004 \003(\0132\014.Aggr"
    "egation\"\224\001\n\tOperation\022\034\n\004scan\030\001 \001(\0132\016.Sc"
    "anOperation\022\"\n\007compute\030\002 \001(\0132\021.ComputeOp"
    "eration\022 \n\006filter\030\003 \001(\0132\020.FilterOperatio"
    "n\022#\n\010group_by\030\004 \001(\0132\021.GroupByOperation", 1038);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "operations.proto", &protobuf_RegisterTypes);
  Expression::default_instance_ = new Expression();
  ScanOperation::default_instance_ = new ScanOperation();
  ComputeOperation::default_instance_ = new ComputeOperation();
  FilterOperation::default_instance_ = new FilterOperation();
  Aggregation::default_instance_ = new Aggregation();
  GroupByOperation::default_instance_ = new GroupByOperation();
  Operation::default_instance_ = new Operation();
  Expression::default_instance_->InitAsDefaultInstance();
  ScanOperation::default_instance_->InitAsDefaultInstance();
  ComputeOperation::default_instance_->InitAsDefaultInstance();
  FilterOperation::default_instance_->InitAsDefaultInstance();
  Aggregation::default_instance_->InitAsDefaultInstance();
  GroupByOperation::default_instance_->InitAsDefaultInstance();
  Operation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_operations_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_operations_2eproto {
  StaticDescriptorInitializer_operations_2eproto() {
    protobuf_AddDesc_operations_2eproto();
  }
} static_descriptor_initializer_operations_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Expression_Operator_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Expression_Operator_descriptor_;
}
bool Expression_Operator_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 100:
    case 101:
    case 102:
    case 103:
    case 150:
    case 151:
    case 200:
    case 201:
    case 202:
    case 203:
    case 300:
    case 301:
    case 302:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Expression_Operator Expression::CONSTANT;
const Expression_Operator Expression::COLUMN;
const Expression_Operator Expression::IF;
const Expression_Operator Expression::ADD;
const Expression_Operator Expression::SUBTRACT;
const Expression_Operator Expression::MULTIPLY;
const Expression_Operator Expression::FLOATING_DIVIDE;
const Expression_Operator Expression::LOG;
const Expression_Operator Expression::NEGATE;
const Expression_Operator Expression::LOWER;
const Expression_Operator Expression::GREATER;
const Expression_Operator Expression::EQUAL;
const Expression_Operator Expression::NOT_EQUAL;
const Expression_Operator Expression::NOT;
const Expression_Operator Expression::OR;
const Expression_Operator Expression::AND;
const Expression_Operator Expression::Operator_MIN;
const Expression_Operator Expression::Operator_MAX;
const int Expression::Operator_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Expression::kOperatorFieldNumber;
const int Expression::kChildrenFieldNumber;
const int Expression::kConstantInt32FieldNumber;
const int Expression::kConstantDoubleFieldNumber;
const int Expression::kConstantBoolFieldNumber;
const int Expression::kColumnIdFieldNumber;
#endif  // !_MSC_VER

Expression::Expression()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Expression::InitAsDefaultInstance() {
}

Expression::Expression(const Expression& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Expression::SharedCtor() {
  _cached_size_ = 0;
  operator__ = 1;
  constant_int32_ = 0;
  constant_double_ = 0;
  constant_bool_ = false;
  column_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Expression::~Expression() {
  SharedDtor();
}

void Expression::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Expression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Expression::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Expression_descriptor_;
}

const Expression& Expression::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operations_2eproto();  return *default_instance_;
}

Expression* Expression::default_instance_ = NULL;

Expression* Expression::New() const {
  return new Expression;
}

void Expression::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operator__ = 1;
    constant_int32_ = 0;
    constant_double_ = 0;
    constant_bool_ = false;
    column_id_ = 0;
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Expression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Expression.Operator operator = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Expression_Operator_IsValid(value)) {
            set_operator_(static_cast< ::Expression_Operator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_children;
        break;
      }
      
      // repeated .Expression children = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_children;
        if (input->ExpectTag(80)) goto parse_constant_int32;
        break;
      }
      
      // optional int32 constant_int32 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_constant_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &constant_int32_)));
          set_has_constant_int32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_constant_double;
        break;
      }
      
      // optional double constant_double = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_constant_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &constant_double_)));
          set_has_constant_double();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_constant_bool;
        break;
      }
      
      // optional bool constant_bool = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_constant_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &constant_bool_)));
          set_has_constant_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_column_id;
        break;
      }
      
      // optional int32 column_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column_id_)));
          set_has_column_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Expression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Expression.Operator operator = 1;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operator_(), output);
  }
  
  // repeated .Expression children = 2;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->children(i), output);
  }
  
  // optional int32 constant_int32 = 10;
  if (has_constant_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->constant_int32(), output);
  }
  
  // optional double constant_double = 11;
  if (has_constant_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->constant_double(), output);
  }
  
  // optional bool constant_bool = 12;
  if (has_constant_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->constant_bool(), output);
  }
  
  // optional int32 column_id = 13;
  if (has_column_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->column_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Expression::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Expression.Operator operator = 1;
  if (has_operator_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operator_(), target);
  }
  
  // repeated .Expression children = 2;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->children(i), target);
  }
  
  // optional int32 constant_int32 = 10;
  if (has_constant_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->constant_int32(), target);
  }
  
  // optional double constant_double = 11;
  if (has_constant_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->constant_double(), target);
  }
  
  // optional bool constant_bool = 12;
  if (has_constant_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->constant_bool(), target);
  }
  
  // optional int32 column_id = 13;
  if (has_column_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->column_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Expression::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Expression.Operator operator = 1;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operator_());
    }
    
    // optional int32 constant_int32 = 10;
    if (has_constant_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->constant_int32());
    }
    
    // optional double constant_double = 11;
    if (has_constant_double()) {
      total_size += 1 + 8;
    }
    
    // optional bool constant_bool = 12;
    if (has_constant_bool()) {
      total_size += 1 + 1;
    }
    
    // optional int32 column_id = 13;
    if (has_column_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->column_id());
    }
    
  }
  // repeated .Expression children = 2;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Expression::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Expression* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Expression*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Expression::MergeFrom(const Expression& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operator_()) {
      set_operator_(from.operator_());
    }
    if (from.has_constant_int32()) {
      set_constant_int32(from.constant_int32());
    }
    if (from.has_constant_double()) {
      set_constant_double(from.constant_double());
    }
    if (from.has_constant_bool()) {
      set_constant_bool(from.constant_bool());
    }
    if (from.has_column_id()) {
      set_column_id(from.column_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Expression::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression::CopyFrom(const Expression& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  return true;
}

void Expression::Swap(Expression* other) {
  if (other != this) {
    std::swap(operator__, other->operator__);
    children_.Swap(&other->children_);
    std::swap(constant_int32_, other->constant_int32_);
    std::swap(constant_double_, other->constant_double_);
    std::swap(constant_bool_, other->constant_bool_);
    std::swap(column_id_, other->column_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Expression::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Expression_descriptor_;
  metadata.reflection = Expression_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ScanOperation_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanOperation_Type_descriptor_;
}
bool ScanOperation_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ScanOperation_Type ScanOperation::INT;
const ScanOperation_Type ScanOperation::DOUBLE;
const ScanOperation_Type ScanOperation::BOOL;
const ScanOperation_Type ScanOperation::Type_MIN;
const ScanOperation_Type ScanOperation::Type_MAX;
const int ScanOperation::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ScanOperation::kColumnFieldNumber;
const int ScanOperation::kTypeFieldNumber;
#endif  // !_MSC_VER

ScanOperation::ScanOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScanOperation::InitAsDefaultInstance() {
}

ScanOperation::ScanOperation(const ScanOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScanOperation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanOperation::~ScanOperation() {
  SharedDtor();
}

void ScanOperation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScanOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanOperation_descriptor_;
}

const ScanOperation& ScanOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operations_2eproto();  return *default_instance_;
}

ScanOperation* ScanOperation::default_instance_ = NULL;

ScanOperation* ScanOperation::New() const {
  return new ScanOperation;
}

void ScanOperation::Clear() {
  column_.Clear();
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_column())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_column())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_column;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // repeated .ScanOperation.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ScanOperation_Type_IsValid(value)) {
            add_type(static_cast< ::ScanOperation_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::ScanOperation_Type_IsValid,
                 this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 column = 1;
  for (int i = 0; i < this->column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->column(i), output);
  }
  
  // repeated .ScanOperation.Type type = 2;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScanOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 column = 1;
  for (int i = 0; i < this->column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->column(i), target);
  }
  
  // repeated .ScanOperation.Type type = 2;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScanOperation::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 column = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->column_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->column(i));
    }
    total_size += 1 * this->column_size() + data_size;
  }
  
  // repeated .ScanOperation.Type type = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanOperation::MergeFrom(const ScanOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  column_.MergeFrom(from.column_);
  type_.MergeFrom(from.type_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanOperation::CopyFrom(const ScanOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanOperation::IsInitialized() const {
  
  return true;
}

void ScanOperation::Swap(ScanOperation* other) {
  if (other != this) {
    column_.Swap(&other->column_);
    type_.Swap(&other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanOperation_descriptor_;
  metadata.reflection = ScanOperation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComputeOperation::kSourceFieldNumber;
const int ComputeOperation::kExpressionsFieldNumber;
#endif  // !_MSC_VER

ComputeOperation::ComputeOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComputeOperation::InitAsDefaultInstance() {
  source_ = const_cast< ::Operation*>(&::Operation::default_instance());
}

ComputeOperation::ComputeOperation(const ComputeOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComputeOperation::SharedCtor() {
  _cached_size_ = 0;
  source_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComputeOperation::~ComputeOperation() {
  SharedDtor();
}

void ComputeOperation::SharedDtor() {
  if (this != default_instance_) {
    delete source_;
  }
}

void ComputeOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputeOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComputeOperation_descriptor_;
}

const ComputeOperation& ComputeOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operations_2eproto();  return *default_instance_;
}

ComputeOperation* ComputeOperation::default_instance_ = NULL;

ComputeOperation* ComputeOperation::New() const {
  return new ComputeOperation;
}

void ComputeOperation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source()) {
      if (source_ != NULL) source_->::Operation::Clear();
    }
  }
  expressions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComputeOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Operation source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_expressions;
        break;
      }
      
      // repeated .Expression expressions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expressions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expressions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_expressions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComputeOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Operation source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->source(), output);
  }
  
  // repeated .Expression expressions = 2;
  for (int i = 0; i < this->expressions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->expressions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComputeOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Operation source = 1;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->source(), target);
  }
  
  // repeated .Expression expressions = 2;
  for (int i = 0; i < this->expressions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->expressions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComputeOperation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Operation source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source());
    }
    
  }
  // repeated .Expression expressions = 2;
  total_size += 1 * this->expressions_size();
  for (int i = 0; i < this->expressions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expressions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputeOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComputeOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComputeOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComputeOperation::MergeFrom(const ComputeOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  expressions_.MergeFrom(from.expressions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      mutable_source()->::Operation::MergeFrom(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComputeOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputeOperation::CopyFrom(const ComputeOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputeOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_source()) {
    if (!this->source().IsInitialized()) return false;
  }
  for (int i = 0; i < expressions_size(); i++) {
    if (!this->expressions(i).IsInitialized()) return false;
  }
  return true;
}

void ComputeOperation::Swap(ComputeOperation* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    expressions_.Swap(&other->expressions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComputeOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComputeOperation_descriptor_;
  metadata.reflection = ComputeOperation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FilterOperation::kSourceFieldNumber;
const int FilterOperation::kExpressionFieldNumber;
#endif  // !_MSC_VER

FilterOperation::FilterOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FilterOperation::InitAsDefaultInstance() {
  source_ = const_cast< ::Operation*>(&::Operation::default_instance());
  expression_ = const_cast< ::Expression*>(&::Expression::default_instance());
}

FilterOperation::FilterOperation(const FilterOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FilterOperation::SharedCtor() {
  _cached_size_ = 0;
  source_ = NULL;
  expression_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterOperation::~FilterOperation() {
  SharedDtor();
}

void FilterOperation::SharedDtor() {
  if (this != default_instance_) {
    delete source_;
    delete expression_;
  }
}

void FilterOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterOperation_descriptor_;
}

const FilterOperation& FilterOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operations_2eproto();  return *default_instance_;
}

FilterOperation* FilterOperation::default_instance_ = NULL;

FilterOperation* FilterOperation::New() const {
  return new FilterOperation;
}

void FilterOperation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source()) {
      if (source_ != NULL) source_->::Operation::Clear();
    }
    if (has_expression()) {
      if (expression_ != NULL) expression_->::Expression::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilterOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Operation source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_expression;
        break;
      }
      
      // required .Expression expression = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expression:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expression()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilterOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Operation source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->source(), output);
  }
  
  // required .Expression expression = 2;
  if (has_expression()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->expression(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FilterOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Operation source = 1;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->source(), target);
  }
  
  // required .Expression expression = 2;
  if (has_expression()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->expression(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FilterOperation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Operation source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source());
    }
    
    // required .Expression expression = 2;
    if (has_expression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expression());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilterOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilterOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilterOperation::MergeFrom(const FilterOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      mutable_source()->::Operation::MergeFrom(from.source());
    }
    if (from.has_expression()) {
      mutable_expression()->::Expression::MergeFrom(from.expression());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilterOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterOperation::CopyFrom(const FilterOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_source()) {
    if (!this->source().IsInitialized()) return false;
  }
  if (has_expression()) {
    if (!this->expression().IsInitialized()) return false;
  }
  return true;
}

void FilterOperation::Swap(FilterOperation* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(expression_, other->expression_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilterOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterOperation_descriptor_;
  metadata.reflection = FilterOperation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Aggregation_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Aggregation_Type_descriptor_;
}
bool Aggregation_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Aggregation_Type Aggregation::SUM;
const Aggregation_Type Aggregation::COUNT;
const Aggregation_Type Aggregation::Type_MIN;
const Aggregation_Type Aggregation::Type_MAX;
const int Aggregation::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Aggregation::kTypeFieldNumber;
const int Aggregation::kAggregatedColumnFieldNumber;
#endif  // !_MSC_VER

Aggregation::Aggregation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Aggregation::InitAsDefaultInstance() {
}

Aggregation::Aggregation(const Aggregation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Aggregation::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  aggregated_column_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Aggregation::~Aggregation() {
  SharedDtor();
}

void Aggregation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Aggregation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Aggregation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Aggregation_descriptor_;
}

const Aggregation& Aggregation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operations_2eproto();  return *default_instance_;
}

Aggregation* Aggregation::default_instance_ = NULL;

Aggregation* Aggregation::New() const {
  return new Aggregation;
}

void Aggregation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    aggregated_column_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Aggregation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aggregation.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aggregation_Type_IsValid(value)) {
            set_type(static_cast< ::Aggregation_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_aggregated_column;
        break;
      }
      
      // optional int32 aggregated_column = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aggregated_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aggregated_column_)));
          set_has_aggregated_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Aggregation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Aggregation.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 aggregated_column = 2;
  if (has_aggregated_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->aggregated_column(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Aggregation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Aggregation.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 aggregated_column = 2;
  if (has_aggregated_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->aggregated_column(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Aggregation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aggregation.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 aggregated_column = 2;
    if (has_aggregated_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aggregated_column());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Aggregation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Aggregation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Aggregation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Aggregation::MergeFrom(const Aggregation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_aggregated_column()) {
      set_aggregated_column(from.aggregated_column());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Aggregation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Aggregation::CopyFrom(const Aggregation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aggregation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Aggregation::Swap(Aggregation* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(aggregated_column_, other->aggregated_column_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Aggregation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Aggregation_descriptor_;
  metadata.reflection = Aggregation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupByOperation::kSourceFieldNumber;
const int GroupByOperation::kGroupByColumnFieldNumber;
const int GroupByOperation::kAggregationsFieldNumber;
#endif  // !_MSC_VER

GroupByOperation::GroupByOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupByOperation::InitAsDefaultInstance() {
  source_ = const_cast< ::Operation*>(&::Operation::default_instance());
}

GroupByOperation::GroupByOperation(const GroupByOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupByOperation::SharedCtor() {
  _cached_size_ = 0;
  source_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupByOperation::~GroupByOperation() {
  SharedDtor();
}

void GroupByOperation::SharedDtor() {
  if (this != default_instance_) {
    delete source_;
  }
}

void GroupByOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupByOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupByOperation_descriptor_;
}

const GroupByOperation& GroupByOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operations_2eproto();  return *default_instance_;
}

GroupByOperation* GroupByOperation::default_instance_ = NULL;

GroupByOperation* GroupByOperation::New() const {
  return new GroupByOperation;
}

void GroupByOperation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source()) {
      if (source_ != NULL) source_->::Operation::Clear();
    }
  }
  group_by_column_.Clear();
  aggregations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupByOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Operation source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group_by_column;
        break;
      }
      
      // repeated int32 group_by_column = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_by_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_group_by_column())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_group_by_column())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group_by_column;
        if (input->ExpectTag(34)) goto parse_aggregations;
        break;
      }
      
      // repeated .Aggregation aggregations = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aggregations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aggregations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_aggregations;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupByOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Operation source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->source(), output);
  }
  
  // repeated int32 group_by_column = 3;
  for (int i = 0; i < this->group_by_column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->group_by_column(i), output);
  }
  
  // repeated .Aggregation aggregations = 4;
  for (int i = 0; i < this->aggregations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->aggregations(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupByOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Operation source = 1;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->source(), target);
  }
  
  // repeated int32 group_by_column = 3;
  for (int i = 0; i < this->group_by_column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->group_by_column(i), target);
  }
  
  // repeated .Aggregation aggregations = 4;
  for (int i = 0; i < this->aggregations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->aggregations(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupByOperation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Operation source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source());
    }
    
  }
  // repeated int32 group_by_column = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->group_by_column_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->group_by_column(i));
    }
    total_size += 1 * this->group_by_column_size() + data_size;
  }
  
  // repeated .Aggregation aggregations = 4;
  total_size += 1 * this->aggregations_size();
  for (int i = 0; i < this->aggregations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aggregations(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupByOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupByOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupByOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupByOperation::MergeFrom(const GroupByOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_by_column_.MergeFrom(from.group_by_column_);
  aggregations_.MergeFrom(from.aggregations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      mutable_source()->::Operation::MergeFrom(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupByOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupByOperation::CopyFrom(const GroupByOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_source()) {
    if (!this->source().IsInitialized()) return false;
  }
  for (int i = 0; i < aggregations_size(); i++) {
    if (!this->aggregations(i).IsInitialized()) return false;
  }
  return true;
}

void GroupByOperation::Swap(GroupByOperation* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    group_by_column_.Swap(&other->group_by_column_);
    aggregations_.Swap(&other->aggregations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupByOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupByOperation_descriptor_;
  metadata.reflection = GroupByOperation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Operation::kScanFieldNumber;
const int Operation::kComputeFieldNumber;
const int Operation::kFilterFieldNumber;
const int Operation::kGroupByFieldNumber;
#endif  // !_MSC_VER

Operation::Operation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Operation::InitAsDefaultInstance() {
  scan_ = const_cast< ::ScanOperation*>(&::ScanOperation::default_instance());
  compute_ = const_cast< ::ComputeOperation*>(&::ComputeOperation::default_instance());
  filter_ = const_cast< ::FilterOperation*>(&::FilterOperation::default_instance());
  group_by_ = const_cast< ::GroupByOperation*>(&::GroupByOperation::default_instance());
}

Operation::Operation(const Operation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Operation::SharedCtor() {
  _cached_size_ = 0;
  scan_ = NULL;
  compute_ = NULL;
  filter_ = NULL;
  group_by_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operation::~Operation() {
  SharedDtor();
}

void Operation::SharedDtor() {
  if (this != default_instance_) {
    delete scan_;
    delete compute_;
    delete filter_;
    delete group_by_;
  }
}

void Operation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_descriptor_;
}

const Operation& Operation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operations_2eproto();  return *default_instance_;
}

Operation* Operation::default_instance_ = NULL;

Operation* Operation::New() const {
  return new Operation;
}

void Operation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_scan()) {
      if (scan_ != NULL) scan_->::ScanOperation::Clear();
    }
    if (has_compute()) {
      if (compute_ != NULL) compute_->::ComputeOperation::Clear();
    }
    if (has_filter()) {
      if (filter_ != NULL) filter_->::FilterOperation::Clear();
    }
    if (has_group_by()) {
      if (group_by_ != NULL) group_by_->::GroupByOperation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Operation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ScanOperation scan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_compute;
        break;
      }
      
      // optional .ComputeOperation compute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filter;
        break;
      }
      
      // optional .FilterOperation filter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_group_by;
        break;
      }
      
      // optional .GroupByOperation group_by = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_by()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Operation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ScanOperation scan = 1;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scan(), output);
  }
  
  // optional .ComputeOperation compute = 2;
  if (has_compute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->compute(), output);
  }
  
  // optional .FilterOperation filter = 3;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->filter(), output);
  }
  
  // optional .GroupByOperation group_by = 4;
  if (has_group_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->group_by(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Operation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ScanOperation scan = 1;
  if (has_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scan(), target);
  }
  
  // optional .ComputeOperation compute = 2;
  if (has_compute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->compute(), target);
  }
  
  // optional .FilterOperation filter = 3;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->filter(), target);
  }
  
  // optional .GroupByOperation group_by = 4;
  if (has_group_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->group_by(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Operation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ScanOperation scan = 1;
    if (has_scan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scan());
    }
    
    // optional .ComputeOperation compute = 2;
    if (has_compute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compute());
    }
    
    // optional .FilterOperation filter = 3;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }
    
    // optional .GroupByOperation group_by = 4;
    if (has_group_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_by());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Operation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scan()) {
      mutable_scan()->::ScanOperation::MergeFrom(from.scan());
    }
    if (from.has_compute()) {
      mutable_compute()->::ComputeOperation::MergeFrom(from.compute());
    }
    if (from.has_filter()) {
      mutable_filter()->::FilterOperation::MergeFrom(from.filter());
    }
    if (from.has_group_by()) {
      mutable_group_by()->::GroupByOperation::MergeFrom(from.group_by());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Operation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  
  if (has_compute()) {
    if (!this->compute().IsInitialized()) return false;
  }
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  if (has_group_by()) {
    if (!this->group_by().IsInitialized()) return false;
  }
  return true;
}

void Operation::Swap(Operation* other) {
  if (other != this) {
    std::swap(scan_, other->scan_);
    std::swap(compute_, other->compute_);
    std::swap(filter_, other->filter_);
    std::swap(group_by_, other->group_by_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Operation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operation_descriptor_;
  metadata.reflection = Operation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
