#include <stdio.h>
#include <vector>
#include <utility>
#include <list>
#include <algorithm>
#include <math.h>
using namespace std;

typedef pair< pair<int, int>, int > triple;

void ins(list<triple> &l, const triple &t)
{
  list<triple>::iterator it = l.begin();
  while(it != l.end() && it->first.second < t.first.second) it++;
  l.insert(it, t);
}

// zakładam, że lista jest posortowana po współrzędnych
void flattern(list<triple> &l, const vector<int> &input, vector<int> &output)
{
  list<triple> stos;
  list<triple>::iterator lIt = l.begin();
  int offset = 0;
  for(int i = 0; i < input.size(); i++)
  {
    while(lIt != l.end() && lIt->first.first == i)
    {
      ins(stos, *lIt);
      offset += lIt->second;
      lIt++;
    }
    output.push_back(input[i] + offset);
    while(stos.front().first.second == i)
    {
      offset -= stos.front().second;
      stos.pop_front();
    }
  }
  return ;
}

int main()
{
  long long i, j, c, i0, t, T, x;
  T = 0;
  x = 0;

  int n;
  scanf("%d", &n);
  int block = max((int)sqrt(n), n);
  vector< list<triple> > listy;
  vector< vector<int> > bazy;

  printf("inicjalizacja\n");
  for(int a = 0; a <= block; a++)
  {
    vector<int> b;
    list<triple> c;
    b.reserve(block + 1);
    bazy.push_back(b);
    listy.push_back(c);
  }
  for(int a = 0; a < n; a++) bazy[0].push_back(0);

  int cur = 0, blok;
  long long p;
  long long ai;
  printf("no to zaczynamy\n");
  for(int a = 0; a < n; a++)
  {
    if(a > 0 && a % block == 0){
      flattern(listy[cur], bazy[cur], bazy[cur+1]);
      cur++;
    }
    p = (x + T)*(x + T)*(x + T);
    i = p % n;
    j = i + p % (n - i + 1);
    c = p % 10;
    i0 = (x + 1 + T)*(x + 1 + T)*(x + 1 + T) % n;
    t = (x + 1234567) % (T + 1);
    printf("ZWIEKSZ %lld %lld %lld PYTANIE %lld %lld\n", i+1, j+1, c, i0+1, t);

    listy[cur].push_back(make_pair(make_pair(i, j), c));
    for(list<triple>::iterator b = listy[cur].begin(); b != listy[cur].end(); b++) printf("(%d %d) %d; ", b->first.first + 1, b->first.second + 1, b->second);
    printf("\n");
    blok = (t == 0 ? 0 : t / block);
    x = bazy[blok][i0];
    list<triple>::iterator b = listy[blok].begin();
    int ile = t - blok * x;
    for(int c = 0; c < ile; c++)
    {
      if(i0 >= b->first.first && i0 <= b->first.second) x += b->second;
      b++;
    }
    ai = bazy[cur][i];

    for(b = listy[cur].begin(); b != listy[cur].end(); b++)
    {
      if(i >= b->first.first && i <= b->first.second){
printf("dodaje\n");
   ai += b->second;
} else {
  printf("opuszczam (%d %d) %d\n", b->first.first + 1, b->first.second + 1, b->second);
}
    }
    printf("ai: %lld\n", ai);
    printf("x: %lld\n", x);
    T++;
  }
 printf("konec");
/*  vector<int> v1, v2;
  for(int i=0; i<5; i++) v1.push_back(0);
  list<triple> list;
  list.push_back(make_pair(make_pair(0, 4), 2));
  list.push_back(make_pair(make_pair(1, 3), 3));
  list.push_back(make_pair(make_pair(0, 2), 5));
  
  list.sort();

  flattern(list, v1, v2);

  for(int i=0; i<5; i++) printf("%d\n", v2[i]); */


  return 0;
}
