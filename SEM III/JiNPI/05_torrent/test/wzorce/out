Test 1:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

Peer();
return 0;
}
Output: Compilation error

Test 2:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

PeerFactory();
return 0;
}
Output: Compilation error

Test 3:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

WakeupSequence();
return 0;
}
Output: Compilation error

Test 4:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

LinearWakeupSequence();
return 0;
}
Output: Compilation error

Test 5:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

AvgCalcPeer();
return 0;
}
Output: Compilation error

Test 6:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

AvgCalcPeer(7.7);
return 0;
}
Output: Test 7:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

++f.constructPeer(7);
return 0;
}
Output: Compilation error

Test 8:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

++createRingTopology(f, 10000);
return 0;
}
Output: Compilation error

Test 9:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

++(t->begin());
return 0;
}
Output: Compilation error

Test 10:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

++(t->end());
return 0;
}
Output: Compilation error

Test 11:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

++(t->getPeer(t->begin()));
return 0;
}
Output: Compilation error

Test 12:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

++l.begin();
return 0;
}
Output: Compilation error

Test 13:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

++l.end();
return 0;
}
Output: Compilation error

Test 14:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

++l.nextPeer();
return 0;
}
Output: Compilation error

Test 15:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

((AvgCalcPeer*)f.constructPeer(7))->getValue() += 7.0;
return 0;
}
Output: Compilation error

Test 16:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

createRingTopology(f, 0);
return 0;
}
Output: Test 17:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());


class Peer2 : public AvgCalcPeer
{
	public:
		Peer2() : AvgCalcPeer(7.0) {}
		~Peer2() {std::cout << (7) << std::endl << std::endl;}
};

Peer* p = new Peer2;
delete p;
return 0;
}
Output: 7

Test 18:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());


class PeerFactory2 : public AvgCalcPeerSinglePeakFactory
{
	public:
		PeerFactory2() {}
		~PeerFactory2() {std::cout << (7) << std::endl << std::endl;}
};

PeerFactory* p = new PeerFactory2;
delete p;
return 0;
}
Output: 7

Test 19:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());


class WakeupSequence2 : public LinearWakeupSequence
{
	public:
		WakeupSequence2(const Topology::iterator& b, const Topology::iterator& e) : LinearWakeupSequence(b, e) {}
		~WakeupSequence2() {std::cout << (7) << std::endl << std::endl;}
};

WakeupSequence* p = new WakeupSequence2(t->begin(), t->end());
delete p;
return 0;
}
Output: 7

Test 20:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());


class PeerFactory2 : public AvgCalcPeerSinglePeakFactory
{
	public:
		PeerFactory2() : x(0) {}
		Peer* constructPeer()
		{
			x++;
			return NULL;
		}
	private:
		int x;
};
std::cout << std::endl;

PeerFactory2 pf;

createRingTopology(pf, 7);
return 0;
}
Output: 
Test 21:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());


for(int i = 0; i < 57; i++)
	simulate(*t, l);
Topology::iterator it = t->begin();
for(; it != t->end(); ++it)
	printf("%.3lf ", ((AvgCalcPeer*)t->getPeer(it))->getValue());
std::cout << std::endl;
return 0;
}
Output: 0.250 0.250 0.125 0.062 0.031 0.016 0.008 0.004 0.002 0.001 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.250 
Test 22:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

t->addPeer(7, f.constructPeer(7)); 
for(int i = 0; i < 57; i++)
	simulate(*t, l);
Topology::iterator it = t->begin();
for(; it != t->end(); ++it)
	printf("%.3lf ", ((AvgCalcPeer*)t->getPeer(it))->getValue());
std::cout << std::endl;
return 0;
}
Output: 0.250 0.250 0.125 0.062 0.031 0.016 0.016 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.250 
Test 23:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

t->removePeer(7); 
for(int i = 0; i < 57; i++)
	simulate(*t, l);
Topology::iterator it = t->begin();
for(; it != t->end(); ++it)
	printf("%.3lf ", ((AvgCalcPeer*)t->getPeer(it))->getValue());
std::cout << std::endl;
return 0;
}
Output: 0.250 0.250 0.125 0.062 0.031 0.016 0.016 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.250 
Test 24:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

t->addPeerConnection(7, 7); 
for(int i = 0; i < 57; i++)
	simulate(*t, l);
Topology::iterator it = t->begin();
for(; it != t->end(); ++it)
	printf("%.3lf ", ((AvgCalcPeer*)t->getPeer(it))->getValue());
std::cout << std::endl;
return 0;
}
Output: 0.250 0.250 0.125 0.062 0.031 0.016 0.008 0.004 0.002 0.001 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.250 
Test 25:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

t->addPeerConnection(0, 1); t->addPeerConnection(1, 0); 
for(int i = 0; i < 57; i++)
	simulate(*t, l);
Topology::iterator it = t->begin();
for(; it != t->end(); ++it)
	printf("%.3lf ", ((AvgCalcPeer*)t->getPeer(it))->getValue());
std::cout << std::endl;
return 0;
}
Output: 0.250 0.250 0.125 0.062 0.031 0.016 0.008 0.004 0.002 0.001 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.250 
Test 26:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());

t->removePeerConnection(0, 1); t->removePeerConnection(1, 0); 
for(int i = 0; i < 57; i++)
	simulate(*t, l);
Topology::iterator it = t->begin();
for(; it != t->end(); ++it)
	printf("%.3lf ", ((AvgCalcPeer*)t->getPeer(it))->getValue());
std::cout << std::endl;
return 0;
}
Output: 0.500 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.500 
Test 27:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());


srand(42);
for(int i = 0; i < 42; i++)
	t->addPeerConnection(rand() % 20, rand() % 20);
for(int i = 0; i < 42; i++)
	t->removePeerConnection(rand() % 20, rand() % 20);

for(int i = 0; i < 57; i++)
	simulate(*t, l);
Topology::iterator it = t->begin();
for(; it != t->end(); ++it)
	printf("%.3lf ", ((AvgCalcPeer*)t->getPeer(it))->getValue());
std::cout << std::endl;
return 0;
}
Output: 0.056 0.056 0.094 0.032 0.033 0.051 0.000 0.031 0.032 0.092 0.056 0.039 0.069 0.046 0.043 0.051 0.030 0.078 0.056 0.056 
Test 28:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());


srand(1337);
for(int i = 0; i < 42; i++)
	t->addPeerConnection(rand() % 20, rand() % 20);
for(int i = 0; i < 42; i++)
	t->removePeerConnection(rand() % 20, rand() % 20);

for(int i = 0; i < 57; i++)
	simulate(*t, l);
Topology::iterator it = t->begin();
for(; it != t->end(); ++it)
	printf("%.3lf ", ((AvgCalcPeer*)t->getPeer(it))->getValue());
std::cout << std::endl;
return 0;
}
Output: 0.083 0.083 0.060 0.045 0.083 0.071 0.083 0.032 0.030 0.027 0.024 0.049 0.083 0.025 0.042 0.030 0.055 0.040 0.012 0.042 
Test 29:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());


srand(5811);
for(int i = 0; i < 13; i++)
{
	int r = rand() % 30;
	t->addPeer(r, f.constructPeer(r));
}
for(int i = 0; i < 7; i++)
	t->removePeer(rand() % 30);
for(int i = 0; i < 42; i++)
	t->addPeerConnection(rand() % 40, rand() % 40);
for(int i = 0; i < 42; i++)
	t->removePeerConnection(rand() % 40, rand() % 40);

for(int i = 0; i < 57; i++)
	simulate(*t, l);
Topology::iterator it = t->begin();
for(; it != t->end(); ++it)
	printf("%.3lf ", ((AvgCalcPeer*)t->getPeer(it))->getValue());
std::cout << std::endl;
return 0;
}
Output: 0.188 0.000 0.125 0.125 0.188 0.000 0.000 0.000 0.125 0.000 0.125 0.125 0.000 0.000 0.000 0.000 0.000 
Test 30:
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include "p2pSimulator.h"
using namespace std;
int main()
{
AvgCalcPeerSinglePeakFactory f; Topology* t = createRingTopology(f, 20); LinearWakeupSequence l(t->begin(), t->end());


srand(99181);
for(int i = 0; i < 35; i++)
{
	int r = rand() % 40;
	t->addPeer(r, f.constructPeer(r));
}
for(int i = 0; i < 15; i++)
	t->removePeer(rand() % 80);
for(int i = 0; i < 84; i++)
	t->addPeerConnection(rand() % 80, rand() % 80);
for(int i = 0; i < 45; i++)
	t->removePeerConnection(rand() % 80, rand() % 80);

for(int i = 0; i < 57; i++)
	simulate(*t, l);
Topology::iterator it = t->begin();
for(; it != t->end(); ++it)
	printf("%.3lf ", ((AvgCalcPeer*)t->getPeer(it))->getValue());
std::cout << std::endl;
return 0;
}
Output: 0.375 0.000 0.375 0.000 0.000 0.125 0.000 0.000 0.000 0.000 0.000 0.000 0.125 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 
