   1               		.file	"keyboard.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  82               	.global	keyboard_get_repeat_mask
  84               	keyboard_get_repeat_mask:
   1:keyboard.c    **** #include <avr\io.h>
   2:keyboard.c    **** #include <avr\interrupt.h>
   3:keyboard.c    **** #include <avr\sleep.h>
   4:keyboard.c    **** 
   5:keyboard.c    **** #include <string.h>
   6:keyboard.c    **** #include <stdio.h>
   7:keyboard.c    **** 
   8:keyboard.c    **** #include "config.h" // Defines F_CPU and loads delay.
   9:keyboard.c    **** #include "util.h"
  10:keyboard.c    **** #include "keyboard.h"
  11:keyboard.c    **** #include "lcd.h"
  12:keyboard.c    **** 
  13:keyboard.c    **** #define TIMER_PRESCALLER (1 << CS22 | 1 << CS20) // 1024
  14:keyboard.c    **** #define TICKS_TILL_REPEAT 100
  15:keyboard.c    **** #define TICKS_TILL_SURE 1 
  16:keyboard.c    **** #define TICKS_PER_UP_CHECK 1
  17:keyboard.c    **** #define TICKS_TILL_LONG_PAUSE 200
  18:keyboard.c    **** 
  19:keyboard.c    **** enum TimerState {
  20:keyboard.c    ****   IDLE = 0,
  21:keyboard.c    ****   DOWN_CHECK_START = 1,
  22:keyboard.c    ****   DOWN_CHECK_END = 2,
  23:keyboard.c    ****   UP_CHECK_START = 3,
  24:keyboard.c    ****   UP_CHECK_END = 4,
  25:keyboard.c    ****   LONG_PAUSE_CHECK = 5,
  26:keyboard.c    ****   REPEAT_CHECK_START = 6,
  27:keyboard.c    ****   REPEAT_CHECK_END = 7
  28:keyboard.c    **** };
  29:keyboard.c    **** 
  30:keyboard.c    **** static enum TimerState updown_state, repeater_state;
  31:keyboard.c    **** static int updown_counter, repeater_counter;
  32:keyboard.c    **** static int updown_ocr, repeater_ocr;
  33:keyboard.c    **** static int pressed_key;
  34:keyboard.c    **** static uint16_t repeat_key;
  35:keyboard.c    **** static void (*key_handler)(int) = 0;
  36:keyboard.c    **** 
  37:keyboard.c    **** 
  38:keyboard.c    **** uint16_t keyboard_get_repeat_mask(void) {
  85               	stabn	68,0,38,.LM0-.LFBB1
  86               	.LM0:
  87               	.LFBB1:
  88               	/* prologue: function */
  89               	/* frame size = 0 */
  39:keyboard.c    ****   return repeat_key;
  40:keyboard.c    **** };
  90               	bn	68,0,40,.LM1-.LFBB1
  91               	.LM1:
  92 0000 8091 0000 		lds r24,repeat_key
  93 0004 9091 0000 		lds r25,repeat_key+1
  94               	/* epilogue start */
  95 0008 0895      		ret
  97               	.Lscope1:
 100               	.global	keyboard_set_repeat_mask
 102               	keyboard_set_repeat_mask:
  41:keyboard.c    **** 
  42:keyboard.c    **** void keyboard_set_repeat_mask(uint16_t mask) {
 103               	42,.LM2-.LFBB2
 104               	.LM2:
 105               	.LFBB2:
 106               	/* prologue: function */
 107               	/* frame size = 0 */
  43:keyboard.c    ****   repeat_key = mask;
 108               	bn	68,0,43,.LM3-.LFBB2
 109               	.LM3:
 110 000a 9093 0000 		sts (repeat_key)+1,r25
 111 000e 8093 0000 		sts repeat_key,r24
 112               	/* epilogue start */
  44:keyboard.c    **** };
 113               	bn	68,0,44,.LM4-.LFBB2
 114               	.LM4:
 115 0012 0895      		ret
 117               	.Lscope2:
 119               	.global	scan_keyboard
 121               	scan_keyboard:
  45:keyboard.c    **** 
  46:keyboard.c    **** 
  47:keyboard.c    **** int scan_keyboard(void) {
 122               	8,0,47,.LM5-.LFBB3
 123               	.LM5:
 124               	.LFBB3:
 125               	/* prologue: function */
 126               	/* frame size = 0 */
  48:keyboard.c    ****   GICR &= ~(1 << (INT2));
 127               	bn	68,0,48,.LM6-.LFBB3
 128               	.LM6:
 129 0014 8BB7      		in r24,91-32
 130 0016 8F7D      		andi r24,lo8(-33)
 131 0018 8BBF      		out 91-32,r24
 132 001a 60E0      		ldi r22,lo8(0)
 133 001c 70E0      		ldi r23,hi8(0)
 134 001e A0E0      		ldi r26,lo8(0)
 135 0020 B0E0      		ldi r27,hi8(0)
 136 0022 20E0      		ldi r18,lo8(0)
 137 0024 30E0      		ldi r19,hi8(0)
 138               	.L7:
  49:keyboard.c    ****   int rows, cols, row, col, i;
  50:keyboard.c    ****   row = col = 0;
  51:keyboard.c    **** 
  52:keyboard.c    ****   // Scan rows.
  53:keyboard.c    ****   for (i = 0, rows = 0; i < 4; i++) {
  54:keyboard.c    ****     if (!(PINA & (1 << i))) {
 139               	,54,.LM7-.LFBB3
 140               	.LM7:
 141 0026 89B3      		in r24,57-32
 142 0028 90E0      		ldi r25,lo8(0)
 143 002a 022E      		mov r0,r18
 144 002c 00C0      		rjmp 2f
 145 002e 9595      	1:	asr r25
 146 0030 8795      		ror r24
 147 0032 0A94      	2:	dec r0
 148 0034 02F4      		brpl 1b
 149 0036 80FD      		sbrc r24,0
 150 0038 00C0      		rjmp .L6
  55:keyboard.c    ****       rows++;
 151               	,55,.LM8-.LFBB3
 152               	.LM8:
 153 003a 6F5F      		subi r22,lo8(-(1))
 154 003c 7F4F      		sbci r23,hi8(-(1))
 155 003e D901      		movw r26,r18
 156               	.L6:
 158               	.LM9:
 159 0040 2F5F      		subi r18,lo8(-(1))
 160 0042 3F4F      		sbci r19,hi8(-(1))
 161 0044 2430      		cpi r18,4
 162 0046 3105      		cpc r19,__zero_reg__
 163 0048 01F4      		brne .L7
  56:keyboard.c    ****       row = i;
  57:keyboard.c    ****     }
  58:keyboard.c    ****   }
  59:keyboard.c    **** 
  60:keyboard.c    ****   DDRA = 0b00001111;
 164               	60,.LM10-.LFBB3
 165               	.LM10:
 166 004a 8FE0      		ldi r24,lo8(15)
 167 004c 8ABB      		out 58-32,r24
  61:keyboard.c    ****   PORTA = 0b11110000;
 168               	abn	68,0,61,.LM11-.LFBB3
 169               	.LM11:
 170 004e 80EF      		ldi r24,lo8(-16)
 171 0050 8BBB      		out 59-32,r24
  62:keyboard.c    ****   asm("nop;");
 172               	abn	68,0,62,.LM12-.LFBB3
 173               	.LM12:
 174               	/* #APP */
 175               	 ;  62 "keyboard.c" 1
 176 0052 0000      		nop;
 177               	 ;  0 "" 2
 178               	/* #NOAPP */
 179 0054 40E0      		ldi r20,lo8(0)
 180 0056 50E0      		ldi r21,hi8(0)
 181 0058 E0E0      		ldi r30,lo8(0)
 182 005a F0E0      		ldi r31,hi8(0)
 183               	.L9:
  63:keyboard.c    ****   
  64:keyboard.c    ****   // Scan columns.
  65:keyboard.c    ****   for (i = 4, cols = 0; i < 8; i++) {
  66:keyboard.c    ****     if (!(PINA & (1 << i))) {
 184               	,66,.LM13-.LFBB3
 185               	.LM13:
 186 005c 89B3      		in r24,57-32
 187 005e 90E0      		ldi r25,lo8(0)
 188 0060 022E      		mov r0,r18
 189 0062 00C0      		rjmp 2f
 190 0064 9595      	1:	asr r25
 191 0066 8795      		ror r24
 192 0068 0A94      	2:	dec r0
 193 006a 02F4      		brpl 1b
 194 006c 80FD      		sbrc r24,0
 195 006e 00C0      		rjmp .L8
  67:keyboard.c    ****       cols++;
 196               	,67,.LM14-.LFBB3
 197               	.LM14:
 198 0070 4F5F      		subi r20,lo8(-(1))
 199 0072 5F4F      		sbci r21,hi8(-(1))
 200 0074 F901      		movw r30,r18
 201 0076 3497      		sbiw r30,4
 202               	.L8:
 204               	.LM15:
 205 0078 2F5F      		subi r18,lo8(-(1))
 206 007a 3F4F      		sbci r19,hi8(-(1))
 207 007c 2830      		cpi r18,8
 208 007e 3105      		cpc r19,__zero_reg__
 209 0080 01F4      		brne .L9
  68:keyboard.c    ****       col = i - 4;
  69:keyboard.c    ****     }	
  70:keyboard.c    ****   }
  71:keyboard.c    **** 
  72:keyboard.c    ****   DDRA = 0b11110000;
 210               	2,.LM16-.LFBB3
 211               	.LM16:
 212 0082 80EF      		ldi r24,lo8(-16)
 213 0084 8ABB      		out 58-32,r24
  73:keyboard.c    ****   PORTA = 0b00001111;
 214               	abn	68,0,73,.LM17-.LFBB3
 215               	.LM17:
 216 0086 8FE0      		ldi r24,lo8(15)
 217 0088 8BBB      		out 59-32,r24
  74:keyboard.c    ****   asm("nop");
 218               	abn	68,0,74,.LM18-.LFBB3
 219               	.LM18:
 220               	/* #APP */
 221               	 ;  74 "keyboard.c" 1
 222 008a 0000      		nop
 223               	 ;  0 "" 2
  75:keyboard.c    **** 
  76:keyboard.c    ****   GIFR |= 1 << INT2;
 224               	n	68,0,76,.LM19-.LFBB3
 225               	.LM19:
 226               	/* #NOAPP */
 227 008c 8AB7      		in r24,90-32
 228 008e 8062      		ori r24,lo8(32)
 229 0090 8ABF      		out 90-32,r24
  77:keyboard.c    ****   GICR |= 1 << INT2;
 230               	n	68,0,77,.LM20-.LFBB3
 231               	.LM20:
 232 0092 8BB7      		in r24,91-32
 233 0094 8062      		ori r24,lo8(32)
 234 0096 8BBF      		out 91-32,r24
  78:keyboard.c    **** 
  79:keyboard.c    ****   if (rows == 1 && cols == 1) {
 235               	bn	68,0,79,.LM21-.LFBB3
 236               	.LM21:
 237 0098 6130      		cpi r22,1
 238 009a 7105      		cpc r23,__zero_reg__
 239 009c 01F0      		breq .L16
 240               	.L10:
  80:keyboard.c    ****     return row * 4 + col;
 241               	n	68,0,80,.LM22-.LFBB3
 242               	.LM22:
 243 009e 2FEF      		ldi r18,lo8(-1)
 244 00a0 3FEF      		ldi r19,hi8(-1)
 245               	.L11:
  81:keyboard.c    ****   }
  82:keyboard.c    ****   return -1;
  83:keyboard.c    **** };
 246               	bn	68,0,83,.LM23-.LFBB3
 247               	.LM23:
 248 00a2 C901      		movw r24,r18
 249               	/* epilogue start */
 250 00a4 0895      		ret
 251               	.L16:
 253               	.LM24:
 254 00a6 4130      		cpi r20,1
 255 00a8 5105      		cpc r21,__zero_reg__
 256 00aa 01F4      		brne .L10
 258               	.LM25:
 259 00ac 9D01      		movw r18,r26
 260 00ae 220F      		lsl r18
 261 00b0 331F      		rol r19
 262 00b2 220F      		lsl r18
 263 00b4 331F      		rol r19
 264 00b6 2E0F      		add r18,r30
 265 00b8 3F1F      		adc r19,r31
 266 00ba 00C0      		rjmp .L11
 275               	.Lscope3:
 277               	.global	keyboard_init
 279               	keyboard_init:
  84:keyboard.c    **** 
  85:keyboard.c    **** 
  86:keyboard.c    **** void keyboard_init(void) {
 280               	:
 281               	.LFBB4:
 282               	/* prologue: function */
 283               	/* frame size = 0 */
  87:keyboard.c    ****   uint8_t tmp;
  88:keyboard.c    **** 
  89:keyboard.c    ****   // Keyboard pins configuration.
  90:keyboard.c    ****   DDRA = 0b11110000;
 285               	:
 286               		ldi r24,lo8(-16)
 287 00bc 80EF      		out 58-32,r24
  91:keyboard.c    ****   PORTA = 0b00001111;
 289               	8:
 290               		ldi r24,lo8(15)
 291 00c0 8FE0      		out 59-32,r24
  92:keyboard.c    **** 
  93:keyboard.c    ****   tmp = MCUCR;
 293               	9:
 294               		in r24,85-32
  94:keyboard.c    ****   tmp &= ~(1 << ISC00);
  95:keyboard.c    ****   tmp |= 1 << ISC01;
  96:keyboard.c    **** 
  97:keyboard.c    ****   MCUCSR &= ~(1 << ISC2);
 296               	30:
 297               		in r24,84-32
 298 00c6 84B7      		andi r24,lo8(-65)
 299 00c8 8F7B      		out 84-32,r24
  98:keyboard.c    **** 
  99:keyboard.c    ****   GICR |= 1 << INT2;
 301               	:
 302               		in r24,91-32
 303 00cc 8BB7      		ori r24,lo8(32)
 304 00ce 8062      		out 91-32,r24
 100:keyboard.c    ****   GIFR |= 1 << INT2;
 306               	:
 307               		in r24,90-32
 308 00d2 8AB7      		ori r24,lo8(32)
 309 00d4 8062      		out 90-32,r24
 101:keyboard.c    **** 
 102:keyboard.c    ****   // Timer2 configuration.
 103:keyboard.c    ****   TCCR2 = TIMER_PRESCALLER;
 311               	:
 312               		ldi r24,lo8(5)
 313 00d8 85E0      		out 69-32,r24
 104:keyboard.c    **** 
 105:keyboard.c    ****   tmp = TIMSK;
 315               	4:
 316               		in r24,89-32
 106:keyboard.c    ****   tmp |= 1 << TOIE2; // Interruption on overflow.
 318               	35:
 319               		ori r24,lo8(64)
 107:keyboard.c    ****   TIMSK = tmp;
 321               	36:
 322               		out 89-32,r24
 108:keyboard.c    **** 
 109:keyboard.c    ****   // Internal counters.
 110:keyboard.c    ****   updown_state = IDLE;
 324               	37:
 325               		sts updown_state,__zero_reg__
 111:keyboard.c    ****   updown_counter = 0;
 327               	38:
 328               		sts (updown_counter)+1,__zero_reg__
 329 00e6 1092 0000 		sts updown_counter,__zero_reg__
 112:keyboard.c    ****   updown_ocr = 0;
 331               	9:
 332               		sts (updown_ocr)+1,__zero_reg__
 333 00ee 1092 0000 		sts updown_ocr,__zero_reg__
 113:keyboard.c    **** 
 114:keyboard.c    ****   repeater_state = IDLE;
 335               	0:
 336               		sts repeater_state,__zero_reg__
 115:keyboard.c    ****   repeater_counter = 0;
 338               	41:
 339               		sts (repeater_counter)+1,__zero_reg__
 340 00fa 1092 0000 		sts repeater_counter,__zero_reg__
 116:keyboard.c    ****   repeater_ocr = 0;
 342               	2:
 343               		sts (repeater_ocr)+1,__zero_reg__
 344 0102 1092 0000 		sts repeater_ocr,__zero_reg__
 117:keyboard.c    **** 
 118:keyboard.c    ****   pressed_key = -1;
 346               	3:
 347               		ldi r24,lo8(-1)
 348 010a 8FEF      		ldi r25,hi8(-1)
 349 010c 9FEF      		sts (pressed_key)+1,r25
 350 010e 9093 0000 		sts pressed_key,r24
 351 0112 8093 0000 	/* epilogue start */
 119:keyboard.c    **** };
 353               		ret
 358               	.Lscope4:
 361               	.global	keyboard_set_handler
 363               	keyboard_set_handler:
 365               	.LM45:
 120:keyboard.c    **** 
 121:keyboard.c    **** 
 122:keyboard.c    **** void keyboard_set_handler(void (*handler)(int)) {
 366               	ologue: function */
 367               	/* frame size = 0 */
 369               	.LM46:
 370               		sts (key_handler)+1,r25
 123:keyboard.c    ****   key_handler = handler;
 371               	key_handler,r24
 372               	/* epilogue start */
 374 011c 8093 0000 	.LM47:
 375               		ret
 124:keyboard.c    **** }
 376               	e	keyboard_set_handler, .-keyboard_set_handler
 377               	.Lscope5:
 379               	.global	handle_updown
 381               	handle_updown:
 383               	.LM48:
 384               	.LFBB6:
 125:keyboard.c    **** 
 126:keyboard.c    **** 
 127:keyboard.c    **** void handle_updown(void) {
 385               	
 386               		push r29
 387               	/* prologue: function */
 388 0122 CF93      	/* frame size = 0 */
 390               	.LM49:
 391               		call scan_keyboard
 128:keyboard.c    ****   int key = scan_keyboard();
 392               	r28,r24
 394 0126 0E94 0000 	.LM50:
 395 012a EC01      		lds r24,updown_state
 129:keyboard.c    ****   if (updown_state == DOWN_CHECK_START) {
 396               	 r24,lo8(1)
 397               		breq .L34
 399 0130 8130      	.LM51:
 400 0132 01F0      		cpi r24,lo8(2)
 130:keyboard.c    ****     if (key >= 0) {
 131:keyboard.c    ****       pressed_key = key;
 132:keyboard.c    ****       updown_state = DOWN_CHECK_END;
 133:keyboard.c    ****       updown_ocr = TICKS_TILL_SURE;
 134:keyboard.c    ****     } else {
 135:keyboard.c    ****       updown_state = IDLE;
 136:keyboard.c    ****       return ;
 137:keyboard.c    ****     }
 138:keyboard.c    ****   } else if (updown_state == DOWN_CHECK_END) {
 401               	 .L35
 403 0134 8230      	.LM52:
 404 0136 01F0      		cpi r24,lo8(3)
 139:keyboard.c    ****     if (key >= 0 && key == pressed_key) {
 140:keyboard.c    ****       key_handler(pressed_key);
 141:keyboard.c    ****       if (repeat_key & 1 << pressed_key) {
 142:keyboard.c    ****         repeater_state = REPEAT_CHECK_START;
 143:keyboard.c    ****         repeater_counter = 0;
 144:keyboard.c    ****         repeater_ocr = TICKS_TILL_REPEAT;
 145:keyboard.c    ****       }
 146:keyboard.c    ****       updown_state = UP_CHECK_START;
 147:keyboard.c    ****       updown_ocr = TICKS_PER_UP_CHECK;
 148:keyboard.c    ****     } else {
 149:keyboard.c    ****       updown_state = IDLE;
 150:keyboard.c    ****     }
 151:keyboard.c    ****   } else if (updown_state == UP_CHECK_START) {
 405               	q .L36
 407 0138 8330      	.LM53:
 408 013a 01F0      		cpi r24,lo8(4)
 152:keyboard.c    ****     if (key == -1) {
 153:keyboard.c    ****       updown_state = UP_CHECK_END;
 154:keyboard.c    ****       updown_ocr = TICKS_TILL_SURE;
 155:keyboard.c    ****     } else {
 156:keyboard.c    ****       updown_state = UP_CHECK_START;
 157:keyboard.c    ****       updown_ocr = TICKS_PER_UP_CHECK;
 158:keyboard.c    ****     }
 159:keyboard.c    ****   } else if(updown_state == UP_CHECK_END) {
 409               	q .L37
 411 013c 8430      	.LM54:
 412 013e 01F0      		cpi r24,lo8(5)
 160:keyboard.c    ****     if (key == -1) {
 161:keyboard.c    ****       key_handler(KEYBOARD_KEYUP);
 162:keyboard.c    ****       pressed_key = -1;
 163:keyboard.c    ****       repeater_state = IDLE;
 164:keyboard.c    ****       updown_state = LONG_PAUSE_CHECK;
 165:keyboard.c    ****       updown_ocr = TICKS_TILL_LONG_PAUSE;
 166:keyboard.c    ****     } else {
 167:keyboard.c    ****       updown_state = UP_CHECK_START;
 168:keyboard.c    ****       updown_ocr = TICKS_PER_UP_CHECK;
 169:keyboard.c    ****     }
 170:keyboard.c    ****   } else if(updown_state == LONG_PAUSE_CHECK) {
 413               	q .L38
 414               	.L32:
 415 0140 8530      	/* epilogue start */
 417               	.LM55:
 418               		pop r29
 171:keyboard.c    ****     key_handler(KEYBOARD_KEYLONGPAUSE);
 172:keyboard.c    ****     updown_state = IDLE;
 173:keyboard.c    ****     set_sleep_mode(SLEEP_MODE_STANDBY);
 174:keyboard.c    ****   }
 175:keyboard.c    **** };
 419               	28
 420               		ret
 421 0144 DF91      	.L35:
 423 0148 0895      	.LM56:
 424               		sbrc r29,7
 425               		rjmp .L26
 426               		lds r24,pressed_key
 427 014a D7FD      		lds r25,(pressed_key)+1
 428 014c 00C0      		cp r28,r24
 429 014e 8091 0000 		cpc r29,r25
 430 0152 9091 0000 		breq .L39
 431 0156 C817      	.L26:
 433 015a 01F0      	.LM57:
 434               		sts updown_state,__zero_reg__
 436               	.LM58:
 437 015c 1092 0000 		pop r29
 438               		pop r28
 439               		ret
 440 0160 DF91      	.L34:
 442 0164 0895      	.LM59:
 443               		sbrc r29,7
 444               		rjmp .L26
 446 0166 D7FD      	.LM60:
 447 0168 00C0      		sts (pressed_key)+1,r29
 448               		sts pressed_key,r28
 450 016a D093 0000 	.LM61:
 451 016e C093 0000 		ldi r24,lo8(2)
 452               		sts updown_state,r24
 454 0172 82E0      	.LM62:
 455 0174 8093 0000 		ldi r24,lo8(1)
 456               		ldi r25,hi8(1)
 457               		sts (updown_ocr)+1,r25
 458 0178 81E0      		sts updown_ocr,r24
 460 017c 9093 0000 	.LM63:
 461 0180 8093 0000 		pop r29
 462               		pop r28
 463               		ret
 464 0184 DF91      	.L36:
 466 0188 0895      	.LM64:
 467               		subi r28,lo8(-1)
 468               		sbci r29,hi8(-1)
 469               		brne .+2
 470 018a CF5F      		rjmp .L40
 471 018c DF4F      	.L33:
 473 0190 00C0      	.LM65:
 474               		sts updown_state,r24
 476               	.LM66:
 477 0192 8093 0000 		ldi r24,lo8(1)
 478               		ldi r25,hi8(1)
 479               		sts (updown_ocr)+1,r25
 480 0196 81E0      		sts updown_ocr,r24
 482 019a 9093 0000 	.LM67:
 483 019e 8093 0000 		pop r29
 484               		pop r28
 485               		ret
 486 01a2 DF91      	.L37:
 488 01a6 0895      	.LM68:
 489               		ldi r24,hi8(-1)
 490               		cpi r28,lo8(-1)
 491               		cpc r29,r24
 492 01a8 8FEF      		breq .L41
 493 01aa CF3F      	.L31:
 495 01ae 01F0      	.LM69:
 496               		ldi r24,lo8(3)
 497               		rjmp .L33
 498               	.L38:
 500 01b2 00C0      	.LM70:
 501               		lds r30,key_handler
 502               		lds r31,(key_handler)+1
 503               		ldi r24,lo8(-2)
 504 01b4 E091 0000 		ldi r25,hi8(-2)
 505 01b8 F091 0000 		icall
 507 01be 9FEF      	.LM71:
 508 01c0 0995      		sts updown_state,__zero_reg__
 510               	.LM72:
 511 01c2 1092 0000 		in r24,85-32
 512               		andi r24,lo8(79)
 513               		ori r24,lo8(-96)
 514 01c6 85B7      		out 85-32,r24
 515 01c8 8F74      		rjmp .L32
 516 01ca 806A      	.L39:
 518 01ce 00C0      	.LM73:
 519               		lds r30,key_handler
 520               		lds r31,(key_handler)+1
 521               		movw r24,r28
 522 01d0 E091 0000 		icall
 524 01d8 CE01      	.LM74:
 525 01da 0995      		ldi r24,lo8(1)
 526               		ldi r25,hi8(1)
 527               		lds r0,pressed_key
 528 01dc 81E0      		rjmp 2f
 529 01de 90E0      	1:	lsl r24
 530 01e0 0090 0000 		rol r25
 531 01e4 00C0      	2:	dec r0
 532 01e6 880F      		brpl 1b
 533 01e8 991F      		lds r18,repeat_key
 534 01ea 0A94      		lds r19,(repeat_key)+1
 535 01ec 02F4      		and r24,r18
 536 01ee 2091 0000 		and r25,r19
 537 01f2 3091 0000 		or r24,r25
 538 01f6 8223      		breq .L31
 540 01fa 892B      	.LM75:
 541 01fc 01F0      		ldi r24,lo8(6)
 542               		sts repeater_state,r24
 544 01fe 86E0      	.LM76:
 545 0200 8093 0000 		sts (repeater_counter)+1,__zero_reg__
 546               		sts repeater_counter,__zero_reg__
 548 0204 1092 0000 	.LM77:
 549 0208 1092 0000 		ldi r24,lo8(100)
 550               		ldi r25,hi8(100)
 551               		sts (repeater_ocr)+1,r25
 552 020c 84E6      		sts repeater_ocr,r24
 554 0210 9093 0000 	.LM78:
 555 0214 8093 0000 		ldi r24,lo8(3)
 556               		rjmp .L33
 557               	.L41:
 559 021a 00C0      	.LM79:
 560               		lds r30,key_handler
 561               		lds r31,(key_handler)+1
 562               		ldi r24,lo8(-1)
 563 021c E091 0000 		ldi r25,hi8(-1)
 564 0220 F091 0000 		icall
 566 0226 9FEF      	.LM80:
 567 0228 0995      		sts (pressed_key)+1,r29
 568               		sts pressed_key,r28
 570 022a D093 0000 	.LM81:
 571 022e C093 0000 		sts repeater_state,__zero_reg__
 573               	.LM82:
 574 0232 1092 0000 		ldi r24,lo8(5)
 575               		sts updown_state,r24
 577 0236 85E0      	.LM83:
 578 0238 8093 0000 		ldi r24,lo8(200)
 579               		ldi r25,hi8(200)
 580               		sts (updown_ocr)+1,r25
 581 023c 88EC      		sts updown_ocr,r24
 582 023e 90E0      		rjmp .L32
 583 0240 9093 0000 	.L40:
 585 0248 00C0      	.LM84:
 586               		ldi r24,lo8(4)
 587               		sts updown_state,r24
 589 024a 84E0      	.LM85:
 590 024c 8093 0000 		ldi r24,lo8(1)
 591               		ldi r25,hi8(1)
 592               		sts (updown_ocr)+1,r25
 593 0250 81E0      		sts updown_ocr,r24
 594 0252 90E0      		rjmp .L32
 599               	.Lscope6:
 601               	.global	handle_repeater
 603               	handle_repeater:
 605               	.LM86:
 606               	.LFBB7:
 176:keyboard.c    **** 
 177:keyboard.c    **** 
 178:keyboard.c    **** void handle_repeater(void) {
 607               	ssed_key)+1
 608               		cp r18,r24
 609               		cpc r19,r25
 610               		breq .L47
 179:keyboard.c    ****   int key = scan_keyboard();
 612               	:
 613               		sts repeater_state,__zero_reg__
 614 025e 0E94 0000 		ret
 615 0262 9C01      	.L47:
 180:keyboard.c    ****   if (key == pressed_key) {
 616               	abn	68,0,182,.LM90-.LFBB7
 617               	.LM90:
 618 0264 8091 0000 		lds r24,repeater_state
 619 0268 9091 0000 		cpi r24,lo8(6)
 620 026c 2817      		brne .L44
 622 0270 01F0      	.LM91:
 181:keyboard.c    ****     // key pressed
 182:keyboard.c    ****     if (repeater_state == REPEAT_CHECK_START) {
 183:keyboard.c    ****       // wait till sure
 184:keyboard.c    ****       repeater_state = REPEAT_CHECK_END;
 185:keyboard.c    ****       repeater_ocr = TICKS_TILL_SURE;
 186:keyboard.c    ****     } else {
 187:keyboard.c    ****       key_handler(pressed_key);
 188:keyboard.c    ****       //PORTA ^= 1 << PA2;
 189:keyboard.c    ****       repeater_state = REPEAT_CHECK_START;
 190:keyboard.c    ****       repeater_ocr = TICKS_TILL_REPEAT;
 191:keyboard.c    ****     }
 192:keyboard.c    ****   } else {
 193:keyboard.c    ****     // bad key pressed, abort repeating
 194:keyboard.c    ****     repeater_state = IDLE;
 623               	4,lo8(7)
 624               		sts repeater_state,r24
 626 0276 0895      	.LM92:
 627               		ldi r24,lo8(1)
 628               		ldi r25,hi8(1)
 629               		sts (repeater_ocr)+1,r25
 630 0278 8091 0000 		sts repeater_ocr,r24
 631 027c 8630      		ret
 632 027e 01F4      	.L44:
 634               	.LM93:
 635 0280 87E0      		lds r30,key_handler
 636 0282 8093 0000 		lds r31,(key_handler)+1
 637               		movw r24,r18
 638               		icall
 640 0288 90E0      	.LM94:
 641 028a 9093 0000 		ldi r24,lo8(6)
 642 028e 8093 0000 		sts repeater_state,r24
 644               	.LM95:
 645               		ldi r24,lo8(100)
 646               		ldi r25,hi8(100)
 647 0294 E091 0000 		sts (repeater_ocr)+1,r25
 648 0298 F091 0000 		sts repeater_ocr,r24
 649 029c C901      		ret
 654 02a2 8093 0000 	.Lscope7:
 656               	.global	__vector_4
 658 02a8 90E0      	__vector_4:
 660 02ae 8093 0000 	.LM96:
 661 02b2 0895      	.LFBB8:
 662               		push __zero_reg__
 663               		push r0
 664               		in r0,__SREG__
 665               		push r0
 666               		clr __zero_reg__
 667               		push r18
 668               		push r19
 669               		push r20
 670               		push r21
 195:keyboard.c    ****   }
 196:keyboard.c    **** };
 197:keyboard.c    **** 
 198:keyboard.c    **** 
 199:keyboard.c    **** ISR(TIMER2_OVF_vect) {
 671               	6
 672               		push r27
 673               		push r30
 674 02b4 1F92      		push r31
 675 02b6 0F92      	/* prologue: Signal */
 676 02b8 0FB6      	/* frame size = 0 */
 678 02bc 1124      	.LM97:
 679 02be 2F93      		lds r24,updown_state
 680 02c0 3F93      		tst r24
 681 02c2 4F93      		breq .L51
 683 02c6 6F93      	.LM98:
 684 02c8 7F93      		lds r24,updown_counter
 685 02ca 8F93      		lds r25,(updown_counter)+1
 686 02cc 9F93      		adiw r24,1
 687 02ce AF93      		sts (updown_counter)+1,r25
 688 02d0 BF93      		sts updown_counter,r24
 690 02d4 FF93      	.LM99:
 691               		lds r18,repeater_counter
 692               		lds r19,(repeater_counter)+1
 200:keyboard.c    ****   if (updown_state == IDLE) return;
 693               	,1
 694               		sts (updown_counter)+1,r25
 695 02d6 8091 0000 		sts updown_counter,r24
 697 02dc 01F0      	.LM99:
 201:keyboard.c    **** 
 202:keyboard.c    ****   //PORTA ^= 1 << PA4;
 203:keyboard.c    **** 
 204:keyboard.c    ****   updown_counter++;
 698               	s r24,updown_counter
 699               		lds r25,(updown_counter)+1
 700 02de 8091 0000 		adiw r24,1
 701 02e2 9091 0000 		sts (updown_counter)+1,r25
 702 02e6 0196      		sts updown_counter,r24
 704 02ec 8093 0000 	.LM99:
 205:keyboard.c    ****   repeater_counter++;
 705               	s r24,updown_counter
 706               		lds r25,(updown_counter)+1
 707 02f0 2091 0000 		adiw r24,1
 708 02f4 3091 0000 		sts (updown_counter)+1,r25
 709 02f8 2F5F      		sts updown_counter,r24
 711 02fc 3093 0000 	.LM99:
 712 0300 2093 0000 		lds r18,repeater_counter
 206:keyboard.c    ****   if (updown_state != IDLE && updown_counter >= updown_ocr) {
 713               	25,(updown_counter)+1
 714               		adiw r24,1
 715 0304 2091 0000 		sts (updown_counter)+1,r25
 716 0308 3091 0000 		sts updown_counter,r24
 718 030e 9307      	.LM99:
 719 0310 04F4      		lds r18,repeater_counter
 720               		lds r19,(repeater_counter)+1
 207:keyboard.c    ****     handle_updown();
 208:keyboard.c    ****     updown_counter = 0;
 209:keyboard.c    ****   }
 210:keyboard.c    ****   if (repeater_state != IDLE && repeater_counter >= repeater_ocr) {
 721               	,1
 722               		sts (updown_counter)+1,r25
 723 0312 8091 0000 		sts updown_counter,r24
 725 0318 01F0      	.LM99:
 726 031a 2091 0000 		lds r18,repeater_counter
 727 031e 3091 0000 		lds r19,(repeater_counter)+1
 728 0322 8091 0000 		subi r18,lo8(-(1))
 729 0326 9091 0000 		sbci r19,hi8(-(1))
 730 032a 2817      		sts (repeater_counter)+1,r19
 731 032c 3907      		sts repeater_counter,r18
 733               	.LM100:
 734               		lds r18,updown_ocr
 211:keyboard.c    ****     handle_repeater();
 212:keyboard.c    ****     repeater_counter = 0;
 213:keyboard.c    ****   }
 214:keyboard.c    **** };
 735               	-(1))
 736               		sbci r19,hi8(-(1))
 737 0330 FF91      		sts (repeater_counter)+1,r19
 738 0332 EF91      		sts repeater_counter,r18
 740 0336 AF91      	.LM100:
 741 0338 9F91      		lds r18,updown_ocr
 742 033a 8F91      		lds r19,(updown_ocr)+1
 743 033c 7F91      		cp r24,r18
 744 033e 6F91      		cpc r25,r19
 745 0340 5F91      		brge .L52
 746 0342 4F91      	.L50:
 748 0346 2F91      	.LM101:
 749 0348 0F90      		lds r24,repeater_state
 750 034a 0FBE      		tst r24
 751 034c 0F90      		breq .L51
 752 034e 1F90      		lds r18,repeater_counter
 753 0350 1895      		lds r19,(repeater_counter)+1
 754               		lds r24,repeater_ocr
 755               		lds r25,(repeater_ocr)+1
 756               		cp r18,r24
 757 0352 0E94 0000 		cpc r19,r25
 758               		brge .L53
 759               	.L51:
 760 0356 1092 0000 	/* epilogue start */
 762 035e 00C0      	.LM102:
 763               		pop r31
 764               		pop r30
 765               		pop r27
 766 0360 0E94 0000 		pop r26
 767               		pop r25
 768               		pop r24
 769 0364 1092 0000 		pop r23
 770 0368 1092 0000 		pop r22
 771 036c 00C0      		pop r21
 772               		pop r20
 773               		pop r19
 774               		pop r18
 775               		pop r0
 776               		out __SREG__,r0
 777               		pop r0
 215:keyboard.c    **** 
 216:keyboard.c    **** 
 217:keyboard.c    **** ISR(INT2_vect) {
 778               		pop r25
 779               		pop r24
 780               		pop r23
 781 036e 1F92      		pop r22
 782 0370 0F92      		pop r21
 783 0372 0FB6      		pop r20
 784 0374 0F92      		pop r19
 785 0376 1124      		pop r18
 786 0378 8F93      		pop r0
 787 037a 9F93      		out __SREG__,r0
 788               		pop r0
 789               		pop __zero_reg__
 218:keyboard.c    ****   if (updown_state == IDLE || updown_state == LONG_PAUSE_CHECK) {
 790               	pop r23
 791               		pop r22
 792 037c 8091 0000 		pop r21
 793 0380 8823      		pop r20
 794 0382 01F0      		pop r19
 795 0384 8530      		pop r18
 796 0386 01F0      		pop r0
 797               		out __SREG__,r0
 219:keyboard.c    ****     set_sleep_mode(SLEEP_MODE_IDLE);
 220:keyboard.c    ****     updown_state = DOWN_CHECK_START;
 221:keyboard.c    ****     updown_counter = 0;
 222:keyboard.c    ****     updown_ocr = TICKS_TILL_SURE;
 223:keyboard.c    ****   }
 224:keyboard.c    **** 
 225:keyboard.c    ****   GIFR |= 1 << INT2;
 798               		pop r26
 799               		pop r25
 800 0388 8AB7      		pop r24
 801 038a 8062      		pop r23
 802 038c 8ABF      		pop r22
 803               		pop r21
 226:keyboard.c    **** };
 804               	8,0,214,.LM102-.LFBB8
 805               	.LM102:
 806 038e 9F91      		pop r31
 807 0390 8F91      		pop r30
 808 0392 0F90      		pop r27
 809 0394 0FBE      		pop r26
 810 0396 0F90      		pop r25
 811 0398 1F90      		pop r24
 812 039a 1895      		pop r23
 813               		pop r22
 814               		pop r21
 815               		pop r20
 816 039c 85B7      		pop r19
 817 039e 8F74      		pop r18
 818 03a0 85BF      		pop r0
 819               		out __SREG__,r0
 820               		pop r0
 821 03a2 81E0      		pop __zero_reg__
 822 03a4 8093 0000 		reti
 823               	.L52:
 825 03a8 1092 0000 	.LM103:
 826 03ac 1092 0000 		call handle_updown
 828               	.LM104:
 829 03b0 81E0      		sts (updown_counter)+1,__zero_reg__
 830 03b2 90E0      		sts updown_counter,__zero_reg__
 831 03b4 9093 0000 		rjmp .L50
 832 03b8 8093 0000 	.L53:
 834               	.LM105:
 835               		call handle_repeater
 837               	.LM106:
 838               		sts (repeater_counter)+1,__zero_reg__
 839               		sts repeater_counter,__zero_reg__
 840               		rjmp .L51
 842               	.Lscope8:
 844               	.global	__vector_18
 846               	__vector_18:
 848               	.LM107:
 849               	.LFBB9:
 850               		push __zero_reg__
 851               		push r0
 852               		in r0,__SREG__
 853               		push r0
 854               		clr __zero_reg__
 855               		push r24
 856               		push r25
DEFINED SYMBOLS
                            *ABS*:00000000 keyboard.c
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:2      *ABS*:0000003f __SREG__
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:3      *ABS*:0000003e __SP_H__
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:4      *ABS*:0000003d __SP_L__
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:5      *ABS*:00000034 __CCP__
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:7      *ABS*:00000001 __zero_reg__
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:84     .text:00000000 keyboard_get_repeat_mask
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:843    .bss:0000000e repeat_key
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:102    .text:0000000a keyboard_set_repeat_mask
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:121    .text:00000014 scan_keyboard
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:279    .text:000000bc keyboard_init
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:836    .bss:00000002 updown_state
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:838    .bss:00000004 updown_counter
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:840    .bss:00000008 updown_ocr
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:837    .bss:00000003 repeater_state
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:839    .bss:00000006 repeater_counter
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:841    .bss:0000000a repeater_ocr
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:842    .bss:0000000c pressed_key
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:365    .text:00000118 keyboard_set_handler
                             .bss:00000000 key_handler
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:384    .text:00000122 handle_updown
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:606    .text:0000025e handle_repeater
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:670    .text:000002b4 __vector_4
C:\Users\Yellow\AppData\Local\Temp/ccHpOq8N.s:777    .text:0000036e __vector_18

UNDEFINED SYMBOLS
__do_clear_bss
