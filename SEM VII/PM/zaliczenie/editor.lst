   1               		.file	"editor.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  99               	.global	cursor_shift_left
 101               	cursor_shift_left:
   1:editor.c      **** #include <avr\eeprom.h>
   2:editor.c      **** #include <avr\pgmspace.h>
   3:editor.c      **** #include <stdio.h>
   4:editor.c      **** #include <string.h>
   5:editor.c      **** 
   6:editor.c      **** #include "config.h" // Defines F_CPU and loads delay.
   7:editor.c      **** #include "editor.h"
   8:editor.c      **** #include "keyboard.h"
   9:editor.c      **** #include "lcd.h"
  10:editor.c      **** 
  11:editor.c      **** #define MIN(a, b) ((a < b) ? a : b)
  12:editor.c      **** #define MAX(a, b) ((a > b) ? a : b)
  13:editor.c      **** 
  14:editor.c      **** #define DELETE_KEY 3
  15:editor.c      **** #define SWITCH_MODE_KEY 12
  16:editor.c      **** #define LEFT_KEY 14
  17:editor.c      **** #define RIGHT_KEY 15
  18:editor.c      **** #define UP_KEY 7
  19:editor.c      **** #define DOWN_KEY 11
  20:editor.c      **** #define CHAR_KEYS_MASK ((uint16_t)0b0010011101110111)
  21:editor.c      **** 
  22:editor.c      **** #define MAX_TEXT_LENGTH 128
  23:editor.c      **** #define LINE_SIZE 4
  24:editor.c      ****                                                	
  25:editor.c      **** enum EditorState {
  26:editor.c      ****   IDLE,
  27:editor.c      ****   CHAR_SELECTION
  28:editor.c      **** };
  29:editor.c      **** 
  30:editor.c      **** 
  31:editor.c      **** enum TransitionType {
  32:editor.c      ****   PROCEED = 0,
  33:editor.c      ****   STOP = 1,
  34:editor.c      **** };
  35:editor.c      **** 
  36:editor.c      **** 
  37:editor.c      **** enum TypingMode {
  38:editor.c      ****   LOWER = 0,
  39:editor.c      ****   FIRST_UPPER = 1,
  40:editor.c      ****   UPPER = 2,
  41:editor.c      ****   DIGITS = 3
  42:editor.c      **** };
  43:editor.c      **** const int TYPING_MODES = 4;
  44:editor.c      **** 
  45:editor.c      **** 
  46:editor.c      **** const uint8_t CHARS_MAPPINGS[] EEMEM =
  47:editor.c      **** { 0, 5,   5, 4,   9, 4,   0, 0,
  48:editor.c      ****   13, 4,  17, 4,  21, 4,  0, 0,
  49:editor.c      ****   25, 5,  30, 4,  34, 5,  0, 0,
  50:editor.c      ****   0, 0,   39, 1,   0, 0,   0, 0
  51:editor.c      **** };
  52:editor.c      **** 
  53:editor.c      **** 
  54:editor.c      **** const uint8_t DIGITS_MAPPINGS[] EEMEM =
  55:editor.c      **** {
  56:editor.c      ****   4, 1,   8, 1,   12, 1,  0, 0,
  57:editor.c      ****   16, 1,  20, 1,  24, 1,  0, 0,
  58:editor.c      ****   29, 1,  33, 1,  38, 1,  0, 0,
  59:editor.c      ****   0, 0,   39, 1,   0, 0,   0, 0
  60:editor.c      **** };
  61:editor.c      **** 
  62:editor.c      **** 
  63:editor.c      **** const uint8_t LOWER_CHARS[] EEMEM =
  64:editor.c      **** { ' ', ',', '.', ':', '1',
  65:editor.c      ****   'a', 'b', 'c', '2',
  66:editor.c      ****   'd', 'e', 'f', '3',
  67:editor.c      ****   'g', 'h', 'i', '4',
  68:editor.c      ****   'j', 'k', 'l', '5',
  69:editor.c      ****   'm', 'n', 'o', '6',
  70:editor.c      ****   'p', 'q', 'r', 's', '7',
  71:editor.c      ****   't', 'u', 'v', '8',
  72:editor.c      ****   'w', 'x', 'y', 'z', '9',
  73:editor.c      ****   '0' };
  74:editor.c      **** 
  75:editor.c      **** 
  76:editor.c      **** const uint8_t UPPER_CHARS[] EEMEM =
  77:editor.c      **** { ' ', ',', '.', ':', '1',
  78:editor.c      ****   'A', 'B', 'C', '2',
  79:editor.c      ****   'D', 'E', 'F', '3',
  80:editor.c      ****   'G', 'H', 'I', '4',
  81:editor.c      ****   'J', 'K', 'L', '5',
  82:editor.c      ****   'M', 'N', 'O', '6',
  83:editor.c      ****   'P', 'Q', 'R', 'S', '7',
  84:editor.c      ****   'T', 'U', 'V', '8',
  85:editor.c      ****   'W', 'X', 'Y', 'Z', '9',
  86:editor.c      ****   '0' };
  87:editor.c      **** 
  88:editor.c      **** 
  89:editor.c      **** static char text_front[MAX_TEXT_LENGTH], text_back[MAX_TEXT_LENGTH];
  90:editor.c      **** static int text_front_p, text_back_p, window_position;
  91:editor.c      **** static enum EditorState editor_state;
  92:editor.c      **** static int pressed_key;
  93:editor.c      **** static uint8_t char_ix;
  94:editor.c      **** static enum TypingMode typing_mode;
  95:editor.c      **** 
  96:editor.c      **** char* refreshed;
  97:editor.c      **** 
  98:editor.c      **** 
  99:editor.c      **** void editor_handle_key(int);
 100:editor.c      **** 
 101:editor.c      **** 
 102:editor.c      **** void editor_init(char* refreshed_flag) {
 103:editor.c      ****   editor_state = IDLE;
 104:editor.c      ****   pressed_key = -1;
 105:editor.c      ****   refreshed = refreshed_flag;
 106:editor.c      ****   *refreshed = 0;
 107:editor.c      ****   typing_mode = LOWER;
 108:editor.c      ****   text_front_p = text_back_p = 0;
 109:editor.c      ****   window_position = 0;
 110:editor.c      **** 
 111:editor.c      ****   lcd_init();
 112:editor.c      ****   lcd_display_control(LCD_ON | LCD_CURSOR_ON | LCD_CURSOR_BLINK);
 113:editor.c      ****   lcd_clear();
 114:editor.c      ****   lcd_return_home();
 115:editor.c      ****   lcd_entry_mode_set(LCD_WRITE_INC);
 116:editor.c      **** 
 117:editor.c      ****   keyboard_init();
 118:editor.c      ****   keyboard_set_repeat_mask(1 << DELETE_KEY);
 119:editor.c      ****   keyboard_set_handler(editor_handle_key);
 120:editor.c      **** };
 121:editor.c      **** 
 122:editor.c      **** 
 123:editor.c      **** void editor_render_gui(void) {
 124:editor.c      ****   char buf[8];
 125:editor.c      ****   uint8_t length = text_front_p + text_back_p;
 126:editor.c      **** 
 127:editor.c      ****   // Characters counter.
 128:editor.c      ****   sprintf(buf, "%d/%d    ", text_front_p + 1, length);
 129:editor.c      ****   lcd_set_position( (0x40) );
 130:editor.c      ****   lcd_display_string(buf, 7);
 131:editor.c      **** 
 132:editor.c      ****   // Typing mode
 133:editor.c      ****   lcd_set_position(0x40 + 14);
 134:editor.c      ****   switch (typing_mode) {
 135:editor.c      ****     case LOWER:
 136:editor.c      ****       lcd_display_string("ab", 2);
 137:editor.c      ****       break;
 138:editor.c      ****     case FIRST_UPPER:
 139:editor.c      ****       lcd_display_string("Ab", 2);
 140:editor.c      ****       break;
 141:editor.c      ****     case UPPER:
 142:editor.c      ****       lcd_display_string("AB", 2);
 143:editor.c      ****       break;
 144:editor.c      ****     case DIGITS:
 145:editor.c      ****       lcd_display_string("12", 2);
 146:editor.c      ****       break;
 147:editor.c      ****     default:
 148:editor.c      ****       break;
 149:editor.c      ****   }
 150:editor.c      **** };
 151:editor.c      **** 
 152:editor.c      **** 
 153:editor.c      **** void editor_refresh(void) {
 154:editor.c      ****   int front_length = MIN(text_front_p - window_position, LINE_SIZE),
 155:editor.c      ****       back_length = MIN(LINE_SIZE - front_length, text_back_p),
 156:editor.c      ****       blank_length = 16 - front_length - back_length,
 157:editor.c      ****       i;
 158:editor.c      **** 
 159:editor.c      ****   if (editor_state == CHAR_SELECTION)
 160:editor.c      ****     lcd_display_control(LCD_ON | LCD_CURSOR_ON | LCD_CURSOR_BLINK);
 161:editor.c      ****   else
 162:editor.c      ****     lcd_display_control(LCD_ON | LCD_CURSOR_ON);
 163:editor.c      **** 
 164:editor.c      ****   lcd_set_position(0x0);
 165:editor.c      ****   lcd_display_string(text_front + window_position, front_length);
 166:editor.c      ****   for (i = 0; i < back_length; i++)
 167:editor.c      ****     lcd_display_string(&text_back[text_back_p - 1 - i], 1);
 168:editor.c      ****   for (i = 0; i < blank_length; i++)
 169:editor.c      ****     lcd_display_string(" ", 1);
 170:editor.c      **** 
 171:editor.c      ****   editor_render_gui();
 172:editor.c      **** };
 173:editor.c      **** 
 174:editor.c      **** 
 175:editor.c      **** void cursor_shift_left(void) {
 102               	175,.LM0-.LFBB1
 103               	.LM0:
 104               	.LFBB1:
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 176:editor.c      ****   if (text_front_p > 0) {
 107               	bn	68,0,176,.LM1-.LFBB1
 108               	.LM1:
 109 0000 4091 0000 		lds r20,text_front_p
 110 0004 5091 0000 		lds r21,(text_front_p)+1
 111 0008 1416      		cp __zero_reg__,r20
 112 000a 1506      		cpc __zero_reg__,r21
 113 000c 04F4      		brge .L2
 177:editor.c      ****     text_front_p--;
 114               		68,0,177,.LM2-.LFBB1
 115               	.LM2:
 116 000e 4150      		subi r20,lo8(-(-1))
 117 0010 5040      		sbci r21,hi8(-(-1))
 118 0012 5093 0000 		sts (text_front_p)+1,r21
 119 0016 4093 0000 		sts text_front_p,r20
 178:editor.c      ****     text_back[text_back_p] = text_front[text_front_p];
 120               	n	68,0,178,.LM3-.LFBB1
 121               	.LM3:
 122 001a 8091 0000 		lds r24,text_back_p
 123 001e 9091 0000 		lds r25,(text_back_p)+1
 124 0022 DC01      		movw r26,r24
 125 0024 A050      		subi r26,lo8(-(text_back))
 126 0026 B040      		sbci r27,hi8(-(text_back))
 127 0028 FA01      		movw r30,r20
 128 002a E050      		subi r30,lo8(-(text_front))
 129 002c F040      		sbci r31,hi8(-(text_front))
 130 002e 2081      		ld r18,Z
 131 0030 2C93      		st X,r18
 179:editor.c      ****     text_back_p++;
 132               	,179,.LM4-.LFBB1
 133               	.LM4:
 134 0032 0196      		adiw r24,1
 135 0034 9093 0000 		sts (text_back_p)+1,r25
 136 0038 8093 0000 		sts text_back_p,r24
 137               	.L2:
 180:editor.c      ****   }
 181:editor.c      ****   if (window_position > text_front_p)
 138               	n	68,0,181,.LM5-.LFBB1
 139               	.LM5:
 140 003c 8091 0000 		lds r24,window_position
 141 0040 9091 0000 		lds r25,(window_position)+1
 142 0044 4817      		cp r20,r24
 143 0046 5907      		cpc r21,r25
 144 0048 04F4      		brge .L3
 182:editor.c      ****     window_position = text_front_p;
 145               		68,0,182,.LM6-.LFBB1
 146               	.LM6:
 147 004a 5093 0000 		sts (window_position)+1,r21
 148 004e 4093 0000 		sts window_position,r20
 149               	.L3:
 183:editor.c      ****   *refreshed = 0;
 150               	bn	68,0,183,.LM7-.LFBB1
 151               	.LM7:
 152 0052 E091 0000 		lds r30,refreshed
 153 0056 F091 0000 		lds r31,(refreshed)+1
 154 005a 1082      		st Z,__zero_reg__
 155               	/* epilogue start */
 184:editor.c      **** };
 156               	n	68,0,184,.LM8-.LFBB1
 157               	.LM8:
 158 005c 0895      		ret
 160               	.Lscope1:
 162               	.global	cursor_shift_right
 164               	cursor_shift_right:
 185:editor.c      **** 
 186:editor.c      **** 
 187:editor.c      **** void cursor_shift_right(void) {
 165               	8,0,187,.LM9-.LFBB2
 166               	.LM9:
 167               	.LFBB2:
 168               	/* prologue: function */
 169               	/* frame size = 0 */
 188:editor.c      ****   if (text_back_p > 0) {
 170               	bn	68,0,188,.LM10-.LFBB2
 171               	.LM10:
 172 005e E091 0000 		lds r30,text_back_p
 173 0062 F091 0000 		lds r31,(text_back_p)+1
 174 0066 1E16      		cp __zero_reg__,r30
 175 0068 1F06      		cpc __zero_reg__,r31
 176 006a 04F4      		brge .L12
 189:editor.c      ****     text_back_p--;
 177               		68,0,189,.LM11-.LFBB2
 178               	.LM11:
 179 006c 3197      		sbiw r30,1
 180 006e F093 0000 		sts (text_back_p)+1,r31
 181 0072 E093 0000 		sts text_back_p,r30
 190:editor.c      ****     text_front[text_front_p] = text_back[text_back_p];
 182               	bn	68,0,190,.LM12-.LFBB2
 183               	.LM12:
 184 0076 2091 0000 		lds r18,text_front_p
 185 007a 3091 0000 		lds r19,(text_front_p)+1
 186 007e D901      		movw r26,r18
 187 0080 A050      		subi r26,lo8(-(text_front))
 188 0082 B040      		sbci r27,hi8(-(text_front))
 189 0084 E050      		subi r30,lo8(-(text_back))
 190 0086 F040      		sbci r31,hi8(-(text_back))
 191 0088 8081      		ld r24,Z
 192 008a 8C93      		st X,r24
 191:editor.c      ****     text_front_p++;
 193               	0,191,.LM13-.LFBB2
 194               	.LM13:
 195 008c 2F5F      		subi r18,lo8(-(1))
 196 008e 3F4F      		sbci r19,hi8(-(1))
 197 0090 3093 0000 		sts (text_front_p)+1,r19
 198 0094 2093 0000 		sts text_front_p,r18
 199               	.L7:
 192:editor.c      ****   }
 193:editor.c      ****   if (window_position + LINE_SIZE < text_front_p + 1)
 200               		68,0,193,.LM14-.LFBB2
 201               	.LM14:
 202 0098 D901      		movw r26,r18
 203 009a 1397      		sbiw r26,3
 204 009c 8091 0000 		lds r24,window_position
 205 00a0 9091 0000 		lds r25,(window_position)+1
 206 00a4 8A17      		cp r24,r26
 207 00a6 9B07      		cpc r25,r27
 208 00a8 04F4      		brge .L8
 194:editor.c      ****     window_position = text_front_p - LINE_SIZE + 1;
 209               	8,0,194,.LM15-.LFBB2
 210               	.LM15:
 211 00aa B093 0000 		sts (window_position)+1,r27
 212 00ae A093 0000 		sts window_position,r26
 213               	.L8:
 195:editor.c      ****   *refreshed = 0;
 214               	bn	68,0,195,.LM16-.LFBB2
 215               	.LM16:
 216 00b2 E091 0000 		lds r30,refreshed
 217 00b6 F091 0000 		lds r31,(refreshed)+1
 218 00ba 1082      		st Z,__zero_reg__
 219               	/* epilogue start */
 196:editor.c      **** };
 220               	n	68,0,196,.LM17-.LFBB2
 221               	.LM17:
 222 00bc 0895      		ret
 223               	.L12:
 224 00be 2091 0000 		lds r18,text_front_p
 225 00c2 3091 0000 		lds r19,(text_front_p)+1
 226 00c6 00C0      		rjmp .L7
 228               	.Lscope2:
 230               	.global	window_shift_left
 232               	window_shift_left:
 197:editor.c      **** 
 198:editor.c      **** 
 199:editor.c      **** void window_shift_left(void) {
 233               	199,.LM18-.LFBB3
 234               	.LM18:
 235               	.LFBB3:
 236               	/* prologue: function */
 237               	/* frame size = 0 */
 200:editor.c      ****   int i;
 201:editor.c      ****   window_position = window_position > LINE_SIZE ?
 238               	bn	68,0,201,.LM19-.LFBB3
 239               	.LM19:
 240 00c8 8091 0000 		lds r24,window_position
 241 00cc 9091 0000 		lds r25,(window_position)+1
 242 00d0 8530      		cpi r24,5
 243 00d2 9105      		cpc r25,__zero_reg__
 244 00d4 04F4      		brge .L14
 245 00d6 80E0      		ldi r24,lo8(0)
 246 00d8 90E0      		ldi r25,hi8(0)
 247               	.L15:
 248 00da 9093 0000 		sts (window_position)+1,r25
 249 00de 8093 0000 		sts window_position,r24
 202:editor.c      ****       window_position - LINE_SIZE : 0;
 203:editor.c      ****   for (i = 0; i < LINE_SIZE; i++)
 204:editor.c      ****     cursor_shift_left();
 250               	,204,.LM20-.LFBB3
 251               	.LM20:
 252 00e2 0E94 0000 		call cursor_shift_left
 253 00e6 0E94 0000 		call cursor_shift_left
 254 00ea 0E94 0000 		call cursor_shift_left
 255 00ee 0E94 0000 		call cursor_shift_left
 205:editor.c      ****   *refreshed = 0;
 256               	n	68,0,205,.LM21-.LFBB3
 257               	.LM21:
 258 00f2 E091 0000 		lds r30,refreshed
 259 00f6 F091 0000 		lds r31,(refreshed)+1
 260 00fa 1082      		st Z,__zero_reg__
 261               	/* epilogue start */
 206:editor.c      **** };
 262               	n	68,0,206,.LM22-.LFBB3
 263               	.LM22:
 264 00fc 0895      		ret
 265               	.L14:
 267               	.LM23:
 268 00fe 0497      		sbiw r24,4
 269 0100 00C0      		rjmp .L15
 271               	.Lscope3:
 273               	.global	window_shift_right
 275               	window_shift_right:
 207:editor.c      **** 
 208:editor.c      **** 
 209:editor.c      **** void window_shift_right(void) {
 276               	09,.LM24-.LFBB4
 277               	.LM24:
 278               	.LFBB4:
 279               	/* prologue: function */
 280               	/* frame size = 0 */
 210:editor.c      ****   int i;
 211:editor.c      ****   if (window_position + LINE_SIZE < text_front_p + text_back_p)
 281               	bn	68,0,211,.LM25-.LFBB4
 282               	.LM25:
 283 0102 4091 0000 		lds r20,window_position
 284 0106 5091 0000 		lds r21,(window_position)+1
 285 010a 4C5F      		subi r20,lo8(-(4))
 286 010c 5F4F      		sbci r21,hi8(-(4))
 287 010e 8091 0000 		lds r24,text_back_p
 288 0112 9091 0000 		lds r25,(text_back_p)+1
 289 0116 2091 0000 		lds r18,text_front_p
 290 011a 3091 0000 		lds r19,(text_front_p)+1
 291 011e 820F      		add r24,r18
 292 0120 931F      		adc r25,r19
 293 0122 4817      		cp r20,r24
 294 0124 5907      		cpc r21,r25
 295 0126 04F4      		brge .L18
 212:editor.c      ****     window_position += LINE_SIZE;
 296               	2,.LM26-.LFBB4
 297               	.LM26:
 298 0128 5093 0000 		sts (window_position)+1,r21
 299 012c 4093 0000 		sts window_position,r20
 300               	.L18:
 213:editor.c      ****   for (i = 0; i < LINE_SIZE; i++)
 214:editor.c      ****     cursor_shift_right();
 301               	bn	68,0,214,.LM27-.LFBB4
 302               	.LM27:
 303 0130 0E94 0000 		call cursor_shift_right
 304 0134 0E94 0000 		call cursor_shift_right
 305 0138 0E94 0000 		call cursor_shift_right
 306 013c 0E94 0000 		call cursor_shift_right
 215:editor.c      ****   *refreshed = 0;
 307               	n	68,0,215,.LM28-.LFBB4
 308               	.LM28:
 309 0140 E091 0000 		lds r30,refreshed
 310 0144 F091 0000 		lds r31,(refreshed)+1
 311 0148 1082      		st Z,__zero_reg__
 312               	/* epilogue start */
 216:editor.c      **** };
 313               	n	68,0,216,.LM29-.LFBB4
 314               	.LM29:
 315 014a 0895      		ret
 317               	.Lscope4:
 319               	.global	delete_char
 321               	delete_char:
 217:editor.c      **** 
 218:editor.c      **** 
 219:editor.c      **** void insert_char(uint8_t offset) {
 220:editor.c      ****   char c = typing_mode == LOWER ?
 221:editor.c      ****     (char) eeprom_read_byte(LOWER_CHARS + offset + char_ix) :
 222:editor.c      ****     (char) eeprom_read_byte(UPPER_CHARS + offset + char_ix);
 223:editor.c      ****   text_back[text_back_p] = c;
 224:editor.c      ****   text_back_p++;
 225:editor.c      ****   *refreshed = 0;
 226:editor.c      **** };
 227:editor.c      **** 
 228:editor.c      **** 
 229:editor.c      **** void update_char(uint8_t offset) {
 230:editor.c      ****   char c = typing_mode == LOWER ?
 231:editor.c      ****     (char) eeprom_read_byte(LOWER_CHARS + offset + char_ix) :
 232:editor.c      ****     (char) eeprom_read_byte(UPPER_CHARS + offset + char_ix);
 233:editor.c      ****   text_back[text_back_p - 1] = c;
 234:editor.c      ****   *refreshed = 0;
 235:editor.c      **** };
 236:editor.c      **** 
 237:editor.c      **** 
 238:editor.c      **** void delete_char(void) {
 322               	8,0,238,.LM30-.LFBB5
 323               	.LM30:
 324               	.LFBB5:
 325               	/* prologue: function */
 326               	/* frame size = 0 */
 239:editor.c      ****   if (text_front_p > 0)
 327               	bn	68,0,239,.LM31-.LFBB5
 328               	.LM31:
 329 014c 2091 0000 		lds r18,text_front_p
 330 0150 3091 0000 		lds r19,(text_front_p)+1
 331 0154 1216      		cp __zero_reg__,r18
 332 0156 1306      		cpc __zero_reg__,r19
 333 0158 04F4      		brge .L21
 240:editor.c      ****     text_front_p--;
 334               		68,0,240,.LM32-.LFBB5
 335               	.LM32:
 336 015a C901      		movw r24,r18
 337 015c 0197      		sbiw r24,1
 338 015e 9093 0000 		sts (text_front_p)+1,r25
 339 0162 8093 0000 		sts text_front_p,r24
 340 0166 9C01      		movw r18,r24
 341               	.L21:
 241:editor.c      ****   if (window_position > text_front_p) {
 342               	68,0,241,.LM33-.LFBB5
 343               	.LM33:
 344 0168 8091 0000 		lds r24,window_position
 345 016c 9091 0000 		lds r25,(window_position)+1
 346 0170 2817      		cp r18,r24
 347 0172 3907      		cpc r19,r25
 348 0174 04F4      		brge .L22
 242:editor.c      ****     window_position = MAX(0, text_front_p - (LINE_SIZE / 2));
 349               		68,0,242,.LM34-.LFBB5
 350               	.LM34:
 351 0176 2230      		cpi r18,2
 352 0178 3105      		cpc r19,__zero_reg__
 353 017a 04F0      		brlt .L26
 354 017c C901      		movw r24,r18
 355 017e 0297      		sbiw r24,2
 356               	.L24:
 357 0180 9093 0000 		sts (window_position)+1,r25
 358 0184 8093 0000 		sts window_position,r24
 359               	.L22:
 243:editor.c      ****   }
 244:editor.c      ****   *refreshed = 0;
 360               	0,244,.LM35-.LFBB5
 361               	.LM35:
 362 0188 E091 0000 		lds r30,refreshed
 363 018c F091 0000 		lds r31,(refreshed)+1
 364 0190 1082      		st Z,__zero_reg__
 365               	/* epilogue start */
 245:editor.c      **** };
 366               	n	68,0,245,.LM36-.LFBB5
 367               	.LM36:
 368 0192 0895      		ret
 369               	.L26:
 371               	.LM37:
 372 0194 80E0      		ldi r24,lo8(0)
 373 0196 90E0      		ldi r25,hi8(0)
 374 0198 00C0      		rjmp .L24
 376               	.Lscope5:
 378               	.global	editor_maybe_switch_to_lower
 380               	editor_maybe_switch_to_lower:
 246:editor.c      **** 
 247:editor.c      **** 
 248:editor.c      **** void editor_get_charkey_info(int key, uint8_t* offset, uint8_t* size) {
 249:editor.c      ****   uint8_t* map_addr =
 250:editor.c      ****     (uint8_t*) (typing_mode == DIGITS ? DIGITS_MAPPINGS : CHARS_MAPPINGS);
 251:editor.c      **** 
 252:editor.c      ****   *offset = eeprom_read_byte(map_addr + 2 * key);
 253:editor.c      ****   *size = eeprom_read_byte(map_addr + 2 * key + 1);
 254:editor.c      **** };
 255:editor.c      **** 
 256:editor.c      **** 
 257:editor.c      **** int editor_handle_idle(int key) {
 258:editor.c      ****   uint8_t offset = 0, size = 0;
 259:editor.c      **** 
 260:editor.c      ****   if (key >= 0 && (1 << key) & CHAR_KEYS_MASK) {
 261:editor.c      ****     editor_get_charkey_info(key, &offset, &size);
 262:editor.c      ****     // Display first character from set.
 263:editor.c      ****     pressed_key = key;
 264:editor.c      ****     char_ix = 0;
 265:editor.c      ****     if (text_front_p + text_back_p < MAX_TEXT_LENGTH)
 266:editor.c      ****       insert_char(offset);
 267:editor.c      ****     // Move right if it's the only possibility.
 268:editor.c      ****     if (size == 1)
 269:editor.c      ****       cursor_shift_right();
 270:editor.c      ****     else
 271:editor.c      ****       editor_state = CHAR_SELECTION;
 272:editor.c      ****   } else if (key == DELETE_KEY) {
 273:editor.c      ****     delete_char();
 274:editor.c      ****   } else if (key == SWITCH_MODE_KEY) {
 275:editor.c      ****     typing_mode = (typing_mode + 1) % TYPING_MODES;
 276:editor.c      ****     *refreshed = 0;
 277:editor.c      ****   } else if (key == RIGHT_KEY) {
 278:editor.c      ****     cursor_shift_right();
 279:editor.c      ****   } else if (key == LEFT_KEY) {
 280:editor.c      ****     cursor_shift_left();
 281:editor.c      ****   } else if (key == UP_KEY) {
 282:editor.c      ****     window_shift_left();
 283:editor.c      ****   } else if (key == DOWN_KEY) {
 284:editor.c      ****     window_shift_right();
 285:editor.c      ****   }
 286:editor.c      **** 
 287:editor.c      ****   return STOP;
 288:editor.c      **** };
 289:editor.c      **** 
 290:editor.c      **** 
 291:editor.c      **** void editor_maybe_switch_to_lower(void) {
 381               	1,.LM38-.LFBB6
 382               	.LM38:
 383               	.LFBB6:
 384               	/* prologue: function */
 385               	/* frame size = 0 */
 292:editor.c      ****   if (typing_mode == FIRST_UPPER) {
 386               	bn	68,0,292,.LM39-.LFBB6
 387               	.LM39:
 388 019a 8091 0000 		lds r24,typing_mode
 389 019e 8130      		cpi r24,lo8(1)
 390 01a0 01F0      		breq .L30
 391 01a2 0895      		ret
 392               	.L30:
 293:editor.c      ****   	typing_mode = LOWER;
 393               		68,0,293,.LM40-.LFBB6
 394               	.LM40:
 395 01a4 1092 0000 		sts typing_mode,__zero_reg__
 294:editor.c      ****     *refreshed = 0;
 396               	tabn	68,0,294,.LM41-.LFBB6
 397               	.LM41:
 398 01a8 E091 0000 		lds r30,refreshed
 399 01ac F091 0000 		lds r31,(refreshed)+1
 400 01b0 1082      		st Z,__zero_reg__
 401 01b2 0895      		ret
 403               	.Lscope6:
 408               	.global	editor_get_charkey_info
 410               	editor_get_charkey_info:
 412               	.LM42:
 413               	.LFBB7:
 414 01b4 CF92      		push r12
 415 01b6 DF92      		push r13
 416 01b8 EF92      		push r14
 417 01ba FF92      		push r15
 418 01bc 0F93      		push r16
 419 01be 1F93      		push r17
 420 01c0 CF93      		push r28
 421 01c2 DF93      		push r29
 422               	/* prologue: function */
 423               	/* frame size = 0 */
 424 01c4 9C01      		movw r18,r24
 425 01c6 7B01      		movw r14,r22
 426 01c8 6A01      		movw r12,r20
 428               	.LM43:
 429 01ca 8091 0000 		lds r24,typing_mode
 430 01ce 8330      		cpi r24,lo8(3)
 431 01d0 01F0      		breq .L32
 432 01d2 C0E0      		ldi r28,lo8(CHARS_MAPPINGS)
 433 01d4 D0E0      		ldi r29,hi8(CHARS_MAPPINGS)
 434               	.L33:
 436               	.LM44:
 437 01d6 8901      		movw r16,r18
 438 01d8 000F      		lsl r16
 439 01da 111F      		rol r17
 440 01dc CE01      		movw r24,r28
 441 01de 800F      		add r24,r16
 442 01e0 911F      		adc r25,r17
 443 01e2 0E94 0000 		call __eerd_byte_m16
 444 01e6 F701      		movw r30,r14
 445 01e8 8083      		st Z,r24
 447               	.LM45:
 448 01ea 0F5F      		subi r16,lo8(-(1))
 449 01ec 1F4F      		sbci r17,hi8(-(1))
 450 01ee CE01      		movw r24,r28
 451 01f0 800F      		add r24,r16
 452 01f2 911F      		adc r25,r17
 453 01f4 0E94 0000 		call __eerd_byte_m16
 454 01f8 F601      		movw r30,r12
 455 01fa 8083      		st Z,r24
 456               	/* epilogue start */
 458               	.LM46:
 459 01fc DF91      		pop r29
 460 01fe CF91      		pop r28
 461 0200 1F91      		pop r17
 462 0202 0F91      		pop r16
 463 0204 FF90      		pop r15
 464 0206 EF90      		pop r14
 465 0208 DF90      		pop r13
 466 020a CF90      		pop r12
 467 020c 0895      		ret
 468               	.L32:
 470               	.LM47:
 471 020e C0E0      		ldi r28,lo8(DIGITS_MAPPINGS)
 472 0210 D0E0      		ldi r29,hi8(DIGITS_MAPPINGS)
 473 0212 00C0      		rjmp .L33
 475               	.Lscope7:
 478               	.global	update_char
 480               	update_char:
 482               	.LM48:
 483               	.LFBB8:
 484               	/* prologue: function */
 485               	/* frame size = 0 */
 486 0214 282F      		mov r18,r24
 488               	.LM49:
 489 0216 8091 0000 		lds r24,typing_mode
 490 021a 8823      		tst r24
 491 021c 01F0      		breq .L39
 492 021e 8091 0000 		lds r24,char_ix
 493 0222 90E0      		ldi r25,lo8(0)
 494 0224 820F      		add r24,r18
 495 0226 911D      		adc r25,__zero_reg__
 496 0228 8050      		subi r24,lo8(-(UPPER_CHARS))
 497 022a 9040      		sbci r25,hi8(-(UPPER_CHARS))
 498 022c 0E94 0000 		call __eerd_byte_m16
 499               	.L37:
 501               	.LM50:
 502 0230 E091 0000 		lds r30,text_back_p
 503 0234 F091 0000 		lds r31,(text_back_p)+1
 504 0238 E050      		subi r30,lo8(-(text_back-1))
 505 023a F040      		sbci r31,hi8(-(text_back-1))
 506 023c 8083      		st Z,r24
 508               	.LM51:
 509 023e E091 0000 		lds r30,refreshed
 510 0242 F091 0000 		lds r31,(refreshed)+1
 511 0246 1082      		st Z,__zero_reg__
 512               	/* epilogue start */
 514               	.LM52:
 515 0248 0895      		ret
 516               	.L39:
 518               	.LM53:
 519 024a 8091 0000 		lds r24,char_ix
 520 024e 90E0      		ldi r25,lo8(0)
 521 0250 820F      		add r24,r18
 522 0252 911D      		adc r25,__zero_reg__
 523 0254 8050      		subi r24,lo8(-(LOWER_CHARS))
 524 0256 9040      		sbci r25,hi8(-(LOWER_CHARS))
 525 0258 0E94 0000 		call __eerd_byte_m16
 526 025c 00C0      		rjmp .L37
 531               	.Lscope8:
 534               	.global	editor_handle_char_selection
 536               	editor_handle_char_selection:
 295:editor.c      ****   }
 296:editor.c      **** };
 297:editor.c      **** 
 298:editor.c      **** int editor_handle_char_selection(int key) {
 537               	 size = 2 */
 538               		movw r18,r24
 540 025e DF93      	.LM55:
 541 0260 CF93      		std Y+1,__zero_reg__
 542 0262 00D0      		std Y+2,__zero_reg__
 544 0266 DEB7      	.LM56:
 545               		sbrc r25,7
 546               		rjmp .L41
 547 0268 9C01      		ldi r24,lo8(1)
 299:editor.c      ****   uint8_t offset = 0, size = 0;
 548               	8(1)
 549               		mov r0,r18
 550 026a 1982      		rjmp 2f
 551 026c 1A82      	1:	lsl r24
 300:editor.c      ****   if (key >= 0 && (1 << key) & CHAR_KEYS_MASK) {
 552               	 r25
 553               	2:	dec r0
 554 026e 97FD      		brpl 1b
 555 0270 00C0      		andi r24,lo8(10103)
 556 0272 81E0      		andi r25,hi8(10103)
 557 0274 90E0      		or r24,r25
 558 0276 022E      		brne .L50
 560 027a 880F      	.LM57:
 561 027c 991F      		cpi r18,3
 562 027e 0A94      		cpc r19,__zero_reg__
 563 0280 02F4      		brne .+2
 564 0282 8777      		rjmp .L51
 565 0284 9772      	.L46:
 567 0288 01F4      	.LM58:
 301:editor.c      ****     if (key == pressed_key) {
 302:editor.c      ****       // Iterate through possible chars.
 303:editor.c      ****       editor_get_charkey_info(key, &offset, &size);
 304:editor.c      ****       char_ix = (char_ix + 1) % size;
 305:editor.c      ****       update_char(offset);
 306:editor.c      ****     } else {
 307:editor.c      ****       // Shift position, then handle as idle in with shifted cursor.
 308:editor.c      ****       editor_maybe_switch_to_lower();
 309:editor.c      ****       editor_state = IDLE;
 310:editor.c      ****       cursor_shift_right();
 311:editor.c      ****       return PROCEED;
 312:editor.c      ****     }
 313:editor.c      ****   } else if (key == KEYBOARD_KEYLONGPAUSE) {
 314:editor.c      ****     // Just shift to right.
 315:editor.c      ****     editor_state = IDLE;
 316:editor.c      ****     cursor_shift_right();
 317:editor.c      ****   } else if (key == DELETE_KEY) {
 568               	 r19,__zero_reg__
 569               		brne .+2
 570 028a 2330      		rjmp .L52
 572 028e 01F4      	.LM59:
 573 0290 00C0      		subi r18,lo8(-1)
 574               		sbci r19,hi8(-1)
 318:editor.c      ****     // Clear char.
 319:editor.c      ****     cursor_shift_right();
 320:editor.c      ****     delete_char();
 321:editor.c      ****     editor_state = IDLE;
 322:editor.c      ****   } else if (key == SWITCH_MODE_KEY) {
 575               	L53
 577 0292 2C30      	.LM60:
 578 0294 3105      		sts editor_state,__zero_reg__
 579 0296 01F4      		ldi r18,lo8(0)
 580 0298 00C0      		ldi r19,hi8(0)
 323:editor.c      ****     // Shift to right before handling like in idle state.
 324:editor.c      ****     cursor_shift_right();
 325:editor.c      ****     editor_state = IDLE;
 326:editor.c      ****     return PROCEED;
 327:editor.c      ****   } else if (key != KEYBOARD_KEYUP) {
 582               	.LM61:
 583 029a 2F5F      		movw r24,r18
 584 029c 3F4F      	/* epilogue start */
 585 029e 01F0      		pop __tmp_reg__
 328:editor.c      ****     // Directional keys works like in idle state.
 329:editor.c      ****     editor_state = IDLE;
 586               	__tmp_reg__
 587               		pop r28
 588 02a0 1092 0000 		pop r29
 589 02a4 20E0      		ret
 590 02a6 30E0      	.L50:
 330:editor.c      ****     return PROCEED;
 331:editor.c      ****   };
 332:editor.c      **** 
 333:editor.c      ****   return STOP;
 334:editor.c      **** };
 592               	
 593               		lds r24,pressed_key
 594 02a8 C901      		lds r25,(pressed_key)+1
 595               		cp r18,r24
 596 02aa 0F90      		cpc r19,r25
 597 02ac 0F90      		brne .+2
 598 02ae CF91      		rjmp .L54
 599 02b0 DF91      	.LBB4:
 600 02b2 0895      	.LBB5:
 602               	.LM63:
 603               		lds r24,typing_mode
 604 02b4 8091 0000 		cpi r24,lo8(1)
 605 02b8 9091 0000 		breq .L55
 606 02bc 2817      	.LBE5:
 607 02be 3907      	.LBE4:
 609 02c2 00C0      	.LM64:
 610               		sts editor_state,__zero_reg__
 612               	.LM65:
 613               		call cursor_shift_right
 614 02c4 8091 0000 		ldi r18,lo8(0)
 615 02c8 8130      		ldi r19,hi8(0)
 616 02ca 01F0      	.L56:
 618               	.LM66:
 619               		movw r24,r18
 620               		pop __tmp_reg__
 621 02cc 1092 0000 		pop __tmp_reg__
 622               		pop r28
 623               		pop r29
 624 02d0 0E94 0000 		ret
 625 02d4 20E0      	.L41:
 627               	.LM67:
 628               		ldi r24,hi8(-2)
 629               		cpi r18,lo8(-2)
 630 02d8 C901      		cpc r19,r24
 631 02da 0F90      		brne .L46
 633 02de CF91      	.LM68:
 634 02e0 DF91      		sts editor_state,__zero_reg__
 636               	.LM69:
 637               		call cursor_shift_right
 638               		ldi r18,lo8(1)
 639 02e4 8FEF      		ldi r19,hi8(1)
 640 02e6 2E3F      		rjmp .L44
 641 02e8 3807      	.L55:
 642 02ea 01F4      	.LBB7:
 643               	.LBB6:
 645 02ec 1092 0000 	.LM70:
 646               		sts typing_mode,__zero_reg__
 648 02f0 0E94 0000 	.LM71:
 649 02f4 21E0      		lds r30,refreshed
 650 02f6 30E0      		lds r31,(refreshed)+1
 651 02f8 00C0      		st Z,__zero_reg__
 652               	.LBE6:
 653               	.LBE7:
 655               	.LM72:
 656               		sts editor_state,__zero_reg__
 658               	.LM73:
 659               		call cursor_shift_right
 660 02fe E091 0000 		ldi r18,lo8(0)
 661 0302 F091 0000 		ldi r19,hi8(0)
 662 0306 1082      		rjmp .L56
 663               	.L53:
 665               	.LM74:
 666               		ldi r18,lo8(1)
 667 0308 1092 0000 		ldi r19,hi8(1)
 669               	.LM75:
 670 030c 0E94 0000 		movw r24,r18
 671 0310 20E0      		pop __tmp_reg__
 672 0312 30E0      		pop __tmp_reg__
 673 0314 00C0      		pop r28
 674               		pop r29
 675               		ret
 676               	.L51:
 678 0318 30E0      	.LM76:
 679               		call cursor_shift_right
 681 031a C901      	.LM77:
 682 031c 0F90      		call delete_char
 684 0320 CF91      	.LM78:
 685 0322 DF91      		sts editor_state,__zero_reg__
 686 0324 0895      		ldi r18,lo8(1)
 687               		ldi r19,hi8(1)
 688               		rjmp .L44
 689               	.L52:
 691               	.LM79:
 692               		call cursor_shift_right
 694               	.LM80:
 695               		sts editor_state,__zero_reg__
 696 032e 1092 0000 		ldi r18,lo8(0)
 697 0332 21E0      		ldi r19,hi8(0)
 698 0334 30E0      		rjmp .L44
 699 0336 00C0      	.L54:
 701               	.LM81:
 702               		movw r24,r18
 703 0338 0E94 0000 		movw r22,r28
 704               		subi r22,lo8(-(1))
 705               		sbci r23,hi8(-(1))
 706 033c 1092 0000 		movw r20,r28
 707 0340 20E0      		subi r20,lo8(-(2))
 708 0342 30E0      		sbci r21,hi8(-(2))
 709 0344 00C0      		call editor_get_charkey_info
 711               	.LM82:
 712               		lds r24,char_ix
 713 0346 C901      		ldi r25,lo8(0)
 714 0348 BE01      		ldd r22,Y+2
 715 034a 6F5F      		adiw r24,1
 716 034c 7F4F      		ldi r23,lo8(0)
 717 034e AE01      		call __divmodhi4
 718 0350 4E5F      		sts char_ix,r24
 720 0354 0E94 0000 	.LM83:
 721               		ldd r24,Y+1
 722               		call update_char
 723 0358 8091 0000 		ldi r18,lo8(1)
 724 035c 90E0      		ldi r19,hi8(1)
 725 035e 6A81      		rjmp .L44
 731               	.Lscope9:
 734 0372 21E0      	.global	insert_char
 736 0376 00C0      	insert_char:
 738               	.LM84:
 739               	.LFBB10:
 740               	/* prologue: function */
 741               	/* frame size = 0 */
 742               		mov r18,r24
 744               	.LM85:
 745               		lds r24,typing_mode
 746               		tst r24
 747               		breq .L61
 748               		lds r24,char_ix
 749               		ldi r25,lo8(0)
 750               		add r24,r18
 751               		adc r25,__zero_reg__
 752               		subi r24,lo8(-(UPPER_CHARS))
 753 0378 282F      		sbci r25,hi8(-(UPPER_CHARS))
 754               		call __eerd_byte_m16
 755               		mov r18,r24
 756 037a 8091 0000 	.L59:
 758 0380 01F0      	.LM86:
 759 0382 8091 0000 		lds r24,text_back_p
 760 0386 90E0      		lds r25,(text_back_p)+1
 761 0388 820F      		movw r30,r24
 762 038a 911D      		subi r30,lo8(-(text_back))
 763 038c 8050      		sbci r31,hi8(-(text_back))
 764 038e 9040      		st Z,r18
 766 0394 282F      	.LM87:
 767               		adiw r24,1
 768               		sts (text_back_p)+1,r25
 769               		sts text_back_p,r24
 771 039a 9091 0000 	.LM88:
 772 039e FC01      		lds r30,refreshed
 773 03a0 E050      		lds r31,(refreshed)+1
 774 03a2 F040      		st Z,__zero_reg__
 775 03a4 2083      	/* epilogue start */
 777               	.LM89:
 778 03a6 0196      		ret
 779 03a8 9093 0000 	.L61:
 781               	.LM90:
 782               		lds r24,char_ix
 783 03b0 E091 0000 		ldi r25,lo8(0)
 784 03b4 F091 0000 		add r24,r18
 785 03b8 1082      		adc r25,__zero_reg__
 786               		subi r24,lo8(-(LOWER_CHARS))
 787               		sbci r25,hi8(-(LOWER_CHARS))
 788               		call __eerd_byte_m16
 789 03ba 0895      		mov r18,r24
 790               		rjmp .L59
 795 03c2 820F      	.Lscope10:
 798 03c8 9040      	.global	editor_handle_idle
 800 03ce 282F      	editor_handle_idle:
 802               	.LM91:
 803               	.LFBB11:
 804               		push r16
 805               		push r17
 806               		push r29
 807               		push r28
 808               		rcall .
 809               		in r28,__SP_L__
 810               		in r29,__SP_H__
 811               	/* prologue: function */
 812               	/* frame size = 2 */
 813               		movw r16,r24
 815 03d2 0F93      	.LM92:
 816 03d4 1F93      		std Y+1,__zero_reg__
 817 03d6 DF93      		std Y+2,__zero_reg__
 819 03da 00D0      	.LM93:
 820 03dc CDB7      		sbrc r25,7
 821 03de DEB7      		rjmp .L63
 822               		ldi r24,lo8(1)
 823               		ldi r25,hi8(1)
 824 03e0 8C01      		mov r0,r16
 825               		rjmp 2f
 826               	1:	lsl r24
 827 03e2 1982      		rol r25
 828 03e4 1A82      	2:	dec r0
 829               		brpl 1b
 830               		andi r24,lo8(10103)
 831 03e6 97FD      		andi r25,hi8(10103)
 832 03e8 00C0      		or r24,r25
 833 03ea 81E0      		brne .L74
 835 03ee 002E      	.LM94:
 836 03f0 00C0      		cpi r16,3
 837 03f2 880F      		cpc r17,__zero_reg__
 838 03f4 991F      		brne .+2
 839 03f6 0A94      		rjmp .L75
 841 03fa 8777      	.LM95:
 842 03fc 9772      		cpi r16,12
 843 03fe 892B      		cpc r17,__zero_reg__
 844 0400 01F4      		brne .L63
 846               	.LM96:
 847 0402 0330      		lds r24,typing_mode
 848 0404 1105      		ldi r25,lo8(0)
 849 0406 01F4      		adiw r24,1
 850 0408 00C0      		andi r24,lo8(3)
 851               		andi r25,hi8(3)
 852               		sts typing_mode,r24
 854 040c 1105      	.LM97:
 855 040e 01F4      		lds r30,refreshed
 856               		lds r31,(refreshed)+1
 857               		st Z,__zero_reg__
 858 0410 8091 0000 		rjmp .L67
 859 0414 90E0      	.L74:
 861 0418 8370      	.LM98:
 862 041a 9070      		movw r24,r16
 863 041c 8093 0000 		movw r22,r28
 864               		subi r22,lo8(-(1))
 865               		sbci r23,hi8(-(1))
 866 0420 E091 0000 		movw r20,r28
 867 0424 F091 0000 		subi r20,lo8(-(2))
 868 0428 1082      		sbci r21,hi8(-(2))
 869 042a 00C0      		call editor_get_charkey_info
 871               	.LM99:
 872               		sts (pressed_key)+1,r17
 873 042c C801      		sts pressed_key,r16
 875 0430 6F5F      	.LM100:
 876 0432 7F4F      		sts char_ix,__zero_reg__
 878 0436 4E5F      	.LM101:
 879 0438 5F4F      		lds r24,text_back_p
 880 043a 0E94 0000 		lds r25,(text_back_p)+1
 881               		lds r18,text_front_p
 882               		lds r19,(text_front_p)+1
 883 043e 1093 0000 		add r24,r18
 884 0442 0093 0000 		adc r25,r19
 885               		cpi r24,128
 886               		cpc r25,__zero_reg__
 887 0446 1092 0000 		brlt .L76
 888               	.L65:
 890 044a 8091 0000 	.LM102:
 891 044e 9091 0000 		ldd r24,Y+2
 892 0452 2091 0000 		cpi r24,lo8(1)
 893 0456 3091 0000 		breq .L73
 895 045c 931F      	.LM103:
 896 045e 8038      		ldi r24,lo8(1)
 897 0460 9105      		sts editor_state,r24
 898 0462 04F0      		rjmp .L67
 899               	.L63:
 901               	.LM104:
 902 0464 8A81      		cpi r16,15
 903 0466 8130      		cpc r17,__zero_reg__
 904 0468 01F0      		breq .L73
 906               	.LM105:
 907 046a 81E0      		cpi r16,14
 908 046c 8093 0000 		cpc r17,__zero_reg__
 909 0470 00C0      		breq .L77
 911               	.LM106:
 912               		cpi r16,7
 913 0472 0F30      		cpc r17,__zero_reg__
 914 0474 1105      		breq .L78
 916               	.LM107:
 917               		cpi r16,11
 918 0478 0E30      		cpc r17,__zero_reg__
 919 047a 1105      		breq .L79
 920 047c 01F0      	.L67:
 922               	.LM108:
 923 047e 0730      		ldi r24,lo8(1)
 924 0480 1105      		ldi r25,hi8(1)
 925 0482 01F0      	/* epilogue start */
 926               		pop __tmp_reg__
 927               		pop __tmp_reg__
 928 0484 0B30      		pop r28
 929 0486 1105      		pop r29
 930 0488 01F0      		pop r17
 931               		pop r16
 932               		ret
 933               	.L76:
 935 048c 90E0      	.LM109:
 936               		ldd r24,Y+1
 937 048e 0F90      		call insert_char
 938 0490 0F90      		rjmp .L65
 939 0492 CF91      	.L73:
 941 0496 1F91      	.LM110:
 942 0498 0F91      		call cursor_shift_right
 943 049a 0895      		rjmp .L67
 944               	.L75:
 946               	.LM111:
 947 049c 8981      		call delete_char
 948 049e 0E94 0000 		rjmp .L67
 949 04a2 00C0      	.L77:
 951               	.LM112:
 952               		call cursor_shift_left
 953 04a4 0E94 0000 		rjmp .L67
 954 04a8 00C0      	.L79:
 956               	.LM113:
 957               		call window_shift_right
 958 04aa 0E94 0000 		rjmp .L67
 959 04ae 00C0      	.L78:
 961               	.LM114:
 962               		call window_shift_left
 963 04b0 0E94 0000 		rjmp .L67
 969 04ba 00C0      	.Lscope11:
 972               	.global	editor_handle_key
 974 04c0 00C0      	editor_handle_key:
 976               	.LM115:
 977               	.LFBB12:
 978               		push r28
 979               		push r29
 980               	/* prologue: function */
 981               	/* frame size = 0 */
 982               		movw r28,r24
 984               	.LM116:
 985               		ldi r24,lo8(1)
 335:editor.c      **** 
 336:editor.c      **** 
 337:editor.c      **** void editor_handle_key(int key) {
 986               	87
 988               	.LM119:
 989 04c2 CF93      		tst r25
 990 04c4 DF93      		brne .L82
 992               	.LM120:
 993 04c6 EC01      		movw r24,r28
 994               		call editor_handle_idle
 996 04c8 81E0      	.LM121:
 997 04ca 00C0      		tst r24
 998               		breq .L83
 338:editor.c      ****   enum TransitionType next = STOP;
 339:editor.c      ****   do {
 340:editor.c      ****     if (editor_state == CHAR_SELECTION)
 341:editor.c      ****       next = editor_handle_char_selection(key);
 342:editor.c      ****     else if (editor_state == IDLE)
 343:editor.c      ****       next = editor_handle_idle(key);
 344:editor.c      ****   } while (next == PROCEED);
 999               	ogue start */
 1001 04cc 8823      	.LM122:
 1002 04ce 01F4      		pop r29
 1003               		pop r28
 1004               		ret
 1005               	.L87:
 1007 04d4 9130      	.LM123:
 1008 04d6 01F0      		movw r24,r28
 1009               		call editor_handle_char_selection
 1010               		rjmp .L82
 1015 04dc CE01      	.Lscope12:
 1016 04de 0E94 0000 		.data
 1017               	.LC0:
 1018               		.string	"%d/%d    "
 1019 04e2 8823      	.LC1:
 1020 04e4 01F0      		.string	"ab"
 1021               	.LC2:
 1022               		.string	"Ab"
 345:editor.c      **** };
 1023               	:
 1024               		.string	"12"
 1025 04e6 DF91      		.text
 1027 04ea 0895      	.global	editor_render_gui
 1029               	editor_render_gui:
 1031 04ec CE01      	.LM124:
 1032 04ee 0E94 0000 	.LFBB13:
 1033 04f2 00C0      		push r16
 1034               		push r17
 1035               		push r29
 1036               		push r28
 1037               		in r28,__SP_L__
 1038               		in r29,__SP_H__
 1039               		sbiw r28,8
 1040               		in __tmp_reg__,__SREG__
 1041 0000 2564 2F25 		cli
 1041      6420 2020 
 1041      2000 
 1042               		out __SP_H__,r29
 1043 000a 6162 00   		out __SREG__,__tmp_reg__
 1044               		out __SP_L__,r28
 1045 000d 4162 00   	/* prologue: function */
 1046               	/* frame size = 8 */
 1048               	.LM125:
 1049 0013 3132 00   		lds r18,text_front_p
 1050               		lds r19,(text_front_p)+1
 1052               	.LM126:
 1053               		in r24,__SP_L__
 1054               		in r25,__SP_H__
 1055               		sbiw r24,8
 1056               		in __tmp_reg__,__SREG__
 1057               		cli
 1058 04f4 0F93      		out __SP_H__,r25
 1059 04f6 1F93      		out __SREG__,__tmp_reg__
 1060 04f8 DF93      		out __SP_L__,r24
 1061 04fa CF93      		in r30,__SP_L__
 1062 04fc CDB7      		in r31,__SP_H__
 1063 04fe DEB7      		adiw r30,1
 1064 0500 2897      		movw r16,r28
 1065 0502 0FB6      		subi r16,lo8(-(1))
 1066 0504 F894      		sbci r17,hi8(-(1))
 1067 0506 DEBF      		in r26,__SP_L__
 1068 0508 0FBE      		in r27,__SP_H__
 1069 050a CDBF      		adiw r26,1+1
 1070               		st X,r17
 1071               		st -X,r16
 1072               		sbiw r26,1
 1073               		ldi r24,lo8(.LC0)
 1074 050c 2091 0000 		ldi r25,hi8(.LC0)
 1075 0510 3091 0000 		std Z+3,r25
 1076               		std Z+2,r24
 1077               		subi r18,lo8(-(1))
 1078 0514 8DB7      		sbci r19,hi8(-(1))
 1079 0516 9EB7      		std Z+5,r19
 1080 0518 0897      		std Z+4,r18
 1081 051a 0FB6      		subi r18,lo8(-(-1))
 1082 051c F894      		sbci r19,hi8(-(-1))
 1083 051e 9EBF      		lds r24,text_back_p
 1084 0520 0FBE      		add r24,r18
 1085 0522 8DBF      		std Z+6,r24
 1086 0524 EDB7      		std Z+7,__zero_reg__
 1087 0526 FEB7      		call sprintf
 1089 052a 8E01      	.LM127:
 1090 052c 0F5F      		in r24,__SP_L__
 1091 052e 1F4F      		in r25,__SP_H__
 1092 0530 ADB7      		adiw r24,8
 1093 0532 BEB7      		in __tmp_reg__,__SREG__
 1094 0534 1296      		cli
 1095 0536 1C93      		out __SP_H__,r25
 1096 0538 0E93      		out __SREG__,__tmp_reg__
 1097 053a 1197      		out __SP_L__,r24
 1098 053c 80E0      		ldi r24,lo8(64)
 1099 053e 90E0      		call lcd_set_position
 1101 0542 8283      	.LM128:
 1102 0544 2F5F      		movw r24,r16
 1103 0546 3F4F      		ldi r22,lo8(7)
 1104 0548 3583      		ldi r23,hi8(7)
 1105 054a 2483      		call lcd_display_string
 1107 054e 3040      	.LM129:
 1108 0550 8091 0000 		ldi r24,lo8(78)
 1109 0554 820F      		call lcd_set_position
 1111 0558 1782      	.LM130:
 1112 055a 0E94 0000 		lds r24,typing_mode
 1113               		cpi r24,lo8(1)
 1114               		breq .L91
 1115 055e 8DB7      		cpi r24,lo8(1)
 1116 0560 9EB7      		brsh .L95
 1118 0564 0FB6      	.LM131:
 1119 0566 F894      		ldi r24,lo8(.LC1)
 1120 0568 9EBF      		ldi r25,hi8(.LC1)
 1121 056a 0FBE      		ldi r22,lo8(2)
 1122 056c 8DBF      		ldi r23,hi8(2)
 1123 056e 80E4      		call lcd_display_string
 1124 0570 0E94 0000 	.L94:
 1125               	/* epilogue start */
 1127 0574 C801      	.LM132:
 1128 0576 67E0      		adiw r28,8
 1129 0578 70E0      		in __tmp_reg__,__SREG__
 1130 057a 0E94 0000 		cli
 1131               		out __SP_H__,r29
 1132               		out __SREG__,__tmp_reg__
 1133 057e 8EE4      		out __SP_L__,r28
 1134 0580 0E94 0000 		pop r28
 1135               		pop r29
 1136               		pop r17
 1137 0584 8091 0000 		pop r16
 1138 0588 8130      		ret
 1139 058a 01F0      	.L95:
 1141 058e 00F4      	.LM133:
 1142               		cpi r24,lo8(2)
 1143               		breq .L92
 1144 0590 80E0      		cpi r24,lo8(3)
 1145 0592 90E0      		brne .L94
 1147 0596 70E0      	.LM134:
 1148 0598 0E94 0000 		ldi r24,lo8(.LC4)
 1149               		ldi r25,hi8(.LC4)
 1150               		ldi r22,lo8(2)
 1151               		ldi r23,hi8(2)
 1152               		call lcd_display_string
 1153 059c 2896      		rjmp .L94
 1154 059e 0FB6      	.L91:
 1156 05a2 DEBF      	.LM135:
 1157 05a4 0FBE      		ldi r24,lo8(.LC2)
 1158 05a6 CDBF      		ldi r25,hi8(.LC2)
 1159 05a8 CF91      		ldi r22,lo8(2)
 1160 05aa DF91      		ldi r23,hi8(2)
 1161 05ac 1F91      		call lcd_display_string
 1162 05ae 0F91      		rjmp .L94
 1163 05b0 0895      	.L92:
 1165               	.LM136:
 1166               		ldi r24,lo8(.LC3)
 1167 05b2 8230      		ldi r25,hi8(.LC3)
 1168 05b4 01F0      		ldi r22,lo8(2)
 1169 05b6 8330      		ldi r23,hi8(2)
 1170 05b8 01F4      		call lcd_display_string
 1171               		rjmp .L94
 1176 05c0 70E0      	.Lscope13:
 1177 05c2 0E94 0000 		.data
 1178 05c6 00C0      	.LC5:
 1179               		.string	" "
 1180               		.text
 1182 05c8 80E0      	.global	editor_refresh
 1184 05cc 62E0      	editor_refresh:
 1186 05d0 0E94 0000 	.LM137:
 1187 05d4 00C0      	.LFBB14:
 1188               		push r14
 1189               		push r15
 1190               		push r16
 1191 05d6 80E0      		push r17
 1192 05d8 90E0      		push r28
 1193 05da 62E0      		push r29
 1194 05dc 70E0      	/* prologue: function */
 1195 05de 0E94 0000 	/* frame size = 0 */
 1197               	.LM138:
 1198               		lds r28,text_front_p
 1199               		lds r29,(text_front_p)+1
 1200               		lds r24,window_position
 1201               		lds r25,(window_position)+1
 1202               		sub r28,r24
 1203               		sbc r29,r25
 1204 0016 2000      		cpi r28,5
 1205               		cpc r29,__zero_reg__
 1206               		brlt .L97
 1207               		ldi r28,lo8(4)
 1208               		ldi r29,hi8(4)
 1209               	.L97:
 1211               	.LM139:
 1212               		ldi r16,lo8(4)
 1213 05e4 EF92      		ldi r17,hi8(4)
 1214 05e6 FF92      		sub r16,r28
 1215 05e8 0F93      		sbc r17,r29
 1216 05ea 1F93      		lds r24,text_back_p
 1217 05ec CF93      		lds r25,(text_back_p)+1
 1218 05ee DF93      		cp r24,r16
 1219               		cpc r25,r17
 1220               		brge .L98
 1221               		movw r16,r24
 1222               	.L98:
 1224 05f4 D091 0000 	.LM140:
 1225 05f8 8091 0000 		ldi r25,lo8(16)
 1226 05fc 9091 0000 		mov r14,r25
 1227 0600 C81B      		mov r15,__zero_reg__
 1228 0602 D90B      		sub r14,r28
 1229 0604 C530      		sbc r15,r29
 1230 0606 D105      		sub r14,r16
 1231 0608 04F0      		sbc r15,r17
 1233 060c D0E0      	.LM141:
 1234               		lds r24,editor_state
 1235               		cpi r24,lo8(1)
 1236               		breq .L108
 1238 0610 10E0      	.LM142:
 1239 0612 0C1B      		ldi r24,lo8(6)
 1240 0614 1D0B      		call lcd_display_control
 1241 0616 8091 0000 	.L100:
 1243 061e 8017      	.LM143:
 1244 0620 9107      		ldi r24,lo8(0)
 1245 0622 04F4      		call lcd_set_position
 1247               	.LM144:
 1248               		lds r24,window_position
 1249               		lds r25,(window_position)+1
 1250 0626 90E1      		subi r24,lo8(-(text_front))
 1251 0628 E92E      		sbci r25,hi8(-(text_front))
 1252 062a F12C      		movw r22,r28
 1253 062c EC1A      		call lcd_display_string
 1255 0630 E01A      	.LM145:
 1256 0632 F10A      		cp __zero_reg__,r16
 1257               		cpc __zero_reg__,r17
 1258               		brge .L101
 1259 0634 8091 0000 		ldi r28,lo8(0)
 1260 0638 8130      		ldi r29,hi8(0)
 1261 063a 01F0      	.L102:
 1263               	.LM146:
 1264 063c 86E0      		lds r24,text_back_p
 1265 063e 0E94 0000 		lds r25,(text_back_p)+1
 1266               		sbiw r24,1
 1267               		sub r24,r28
 1268               		sbc r25,r29
 1269 0642 80E0      		subi r24,lo8(-(text_back))
 1270 0644 0E94 0000 		sbci r25,hi8(-(text_back))
 1271               		ldi r22,lo8(1)
 1272               		ldi r23,hi8(1)
 1273 0648 8091 0000 		call lcd_display_string
 1275 0650 8050      	.LM147:
 1276 0652 9040      		adiw r28,1
 1277 0654 BE01      		cp r28,r16
 1278 0656 0E94 0000 		cpc r29,r17
 1279               		brlt .L102
 1280               	.L101:
 1282 065c 1106      	.LM148:
 1283 065e 04F4      		cp __zero_reg__,r14
 1284 0660 C0E0      		cpc __zero_reg__,r15
 1285 0662 D0E0      		brge .L103
 1286               		ldi r28,lo8(0)
 1287               		ldi r29,hi8(0)
 1288               	.L104:
 1290 0668 9091 0000 	.LM149:
 1291 066c 0197      		ldi r24,lo8(.LC5)
 1292 066e 8C1B      		ldi r25,hi8(.LC5)
 1293 0670 9D0B      		ldi r22,lo8(1)
 1294 0672 8050      		ldi r23,hi8(1)
 1295 0674 9040      		call lcd_display_string
 1297 0678 70E0      	.LM150:
 1298 067a 0E94 0000 		adiw r28,1
 1299               		cp r28,r14
 1300               		cpc r29,r15
 1301 067e 2196      		brlt .L104
 1302 0680 C017      	.L103:
 1304 0684 04F0      	.LM151:
 1305               		call editor_render_gui
 1306               	/* epilogue start */
 1308 0686 1E14      	.LM152:
 1309 0688 1F04      		pop r29
 1310 068a 04F4      		pop r28
 1311 068c C0E0      		pop r17
 1312 068e D0E0      		pop r16
 1313               		pop r15
 1314               		pop r14
 1315               		ret
 1316 0690 80E0      	.L108:
 1318 0694 61E0      	.LM153:
 1319 0696 70E0      		ldi r24,lo8(7)
 1320 0698 0E94 0000 		call lcd_display_control
 1321               		rjmp .L100
 1329               	.Lscope14:
 1332               	.global	editor_init
 1334 06a8 DF91      	editor_init:
 1336 06ac 1F91      	.LM154:
 1337 06ae 0F91      	.LFBB15:
 1338 06b0 FF90      	/* prologue: function */
 1339 06b2 EF90      	/* frame size = 0 */
 1340 06b4 0895      		movw r30,r24
 1342               	.LM155:
 1343               		sts editor_state,__zero_reg__
 1345 06b8 0E94 0000 	.LM156:
 1346 06bc 00C0      		ldi r24,lo8(-1)
 1347               		ldi r25,hi8(-1)
 1348               		sts (pressed_key)+1,r25
 1349               		sts pressed_key,r24
 1351               	.LM157:
 1352               		sts (refreshed)+1,r31
 1353               		sts refreshed,r30
 1355               	.LM158:
 1356               		st Z,__zero_reg__
 1358               	.LM159:
 1359               		sts typing_mode,__zero_reg__
 1361               	.LM160:
 1362               		sts (text_back_p)+1,__zero_reg__
 1363               		sts text_back_p,__zero_reg__
 1364               		sts (text_front_p)+1,__zero_reg__
 1365 06be FC01      		sts text_front_p,__zero_reg__
 1367               	.LM161:
 1368 06c0 1092 0000 		sts (window_position)+1,__zero_reg__
 1369               		sts window_position,__zero_reg__
 1371 06c4 8FEF      	.LM162:
 1372 06c6 9FEF      		call lcd_init
 1374 06cc 8093 0000 	.LM163:
 1375               		ldi r24,lo8(7)
 1376               		call lcd_display_control
 1378 06d4 E093 0000 	.LM164:
 1379               		call lcd_clear
 1381 06d8 1082      	.LM165:
 1382               		call lcd_return_home
 1384 06da 1092 0000 	.LM166:
 1385               		ldi r24,lo8(2)
 1386               		call lcd_entry_mode_set
 1388 06e2 1092 0000 	.LM167:
 1389 06e6 1092 0000 		call keyboard_init
 1391               	.LM168:
 1392               		ldi r24,lo8(8)
 1393 06ee 1092 0000 		ldi r25,hi8(8)
 1394 06f2 1092 0000 		call keyboard_set_repeat_mask
 1396               	.LM169:
 1397 06f6 0E94 0000 		ldi r24,lo8(gs(editor_handle_key))
 1398               		ldi r25,hi8(gs(editor_handle_key))
 1399               		call keyboard_set_handler
 1400 06fa 87E0      	/* epilogue start */
 1402               	.LM170:
 1403               		ret
 1405               	.Lscope15:
 1406               	.global	TYPING_MODES
 1407 0704 0E94 0000 		.data
 1410 0708 82E0      	TYPING_MODES:
 1411 070a 0E94 0000 		.word	4
 1412               	.global	CHARS_MAPPINGS
 1413               		.section	.eeprom,"a",@progbits
 1416               	CHARS_MAPPINGS:
 1417 0712 88E0      		.byte	0
 1418 0714 90E0      		.byte	5
 1419 0716 0E94 0000 		.byte	5
 1420               		.byte	4
 1421               		.byte	9
 1422 071a 80E0      		.byte	4
 1423 071c 90E0      		.byte	0
 1424 071e 0E94 0000 		.byte	0
 1425               		.byte	13
 1426               		.byte	4
 1427               		.byte	17
 1428 0722 0895      		.byte	4
 1429               		.byte	21
 1430               		.byte	4
 1431               		.byte	0
 1432               		.byte	0
 1433               		.byte	25
 1434               		.byte	5
 1435               		.byte	30
 1436 0018 0400      		.byte	4
 1437               		.byte	34
 1438               		.byte	5
 1439               		.byte	0
 1440               		.byte	0
 1441               		.byte	0
 1442 0000 00        		.byte	0
 1443 0001 05        		.byte	39
 1444 0002 05        		.byte	1
 1445 0003 04        		.byte	0
 1446 0004 09        		.byte	0
 1447 0005 04        		.byte	0
 1448 0006 00        		.byte	0
 1449 0007 00        	.global	DIGITS_MAPPINGS
 1452 000a 11        	DIGITS_MAPPINGS:
 1453 000b 04        		.byte	4
 1454 000c 15        		.byte	1
 1455 000d 04        		.byte	8
 1456 000e 00        		.byte	1
 1457 000f 00        		.byte	12
 1458 0010 19        		.byte	1
 1459 0011 05        		.byte	0
 1460 0012 1E        		.byte	0
 1461 0013 04        		.byte	16
 1462 0014 22        		.byte	1
 1463 0015 05        		.byte	20
 1464 0016 00        		.byte	1
 1465 0017 00        		.byte	24
 1466 0018 00        		.byte	1
 1467 0019 00        		.byte	0
 1468 001a 27        		.byte	0
 1469 001b 01        		.byte	29
 1470 001c 00        		.byte	1
 1471 001d 00        		.byte	33
 1472 001e 00        		.byte	1
 1473 001f 00        		.byte	38
 1474               		.byte	1
 1475               		.byte	0
 1476               		.byte	0
 1477               		.byte	0
 1478 0020 04        		.byte	0
 1479 0021 01        		.byte	39
 1480 0022 08        		.byte	1
 1481 0023 01        		.byte	0
 1482 0024 0C        		.byte	0
 1483 0025 01        		.byte	0
 1484 0026 00        		.byte	0
 1485 0027 00        	.global	LOWER_CHARS
 1488 002a 14        	LOWER_CHARS:
 1489 002b 01        		.byte	32
 1490 002c 18        		.byte	44
 1491 002d 01        		.byte	46
 1492 002e 00        		.byte	58
 1493 002f 00        		.byte	49
 1494 0030 1D        		.byte	97
 1495 0031 01        		.byte	98
 1496 0032 21        		.byte	99
 1497 0033 01        		.byte	50
 1498 0034 26        		.byte	100
 1499 0035 01        		.byte	101
 1500 0036 00        		.byte	102
 1501 0037 00        		.byte	51
 1502 0038 00        		.byte	103
 1503 0039 00        		.byte	104
 1504 003a 27        		.byte	105
 1505 003b 01        		.byte	52
 1506 003c 00        		.byte	106
 1507 003d 00        		.byte	107
 1508 003e 00        		.byte	108
 1509 003f 00        		.byte	53
 1510               		.byte	109
 1511               		.byte	110
 1512               		.byte	111
 1513               		.byte	54
 1514 0040 20        		.byte	112
 1515 0041 2C        		.byte	113
 1516 0042 2E        		.byte	114
 1517 0043 3A        		.byte	115
 1518 0044 31        		.byte	55
 1519 0045 61        		.byte	116
 1520 0046 62        		.byte	117
 1521 0047 63        		.byte	118
 1522 0048 32        		.byte	56
 1523 0049 64        		.byte	119
 1524 004a 65        		.byte	120
 1525 004b 66        		.byte	121
 1526 004c 33        		.byte	122
 1527 004d 67        		.byte	57
 1528 004e 68        		.byte	48
 1529 004f 69        	.global	UPPER_CHARS
 1532 0052 6B        	UPPER_CHARS:
 1533 0053 6C        		.byte	32
 1534 0054 35        		.byte	44
 1535 0055 6D        		.byte	46
 1536 0056 6E        		.byte	58
 1537 0057 6F        		.byte	49
 1538 0058 36        		.byte	65
 1539 0059 70        		.byte	66
 1540 005a 71        		.byte	67
 1541 005b 72        		.byte	50
 1542 005c 73        		.byte	68
 1543 005d 37        		.byte	69
 1544 005e 74        		.byte	70
 1545 005f 75        		.byte	51
 1546 0060 76        		.byte	71
 1547 0061 38        		.byte	72
 1548 0062 77        		.byte	73
 1549 0063 78        		.byte	52
 1550 0064 79        		.byte	74
 1551 0065 7A        		.byte	75
 1552 0066 39        		.byte	76
 1553 0067 30        		.byte	53
 1554               		.byte	77
 1555               		.byte	78
 1556               		.byte	79
 1557               		.byte	54
 1558 0068 20        		.byte	80
 1559 0069 2C        		.byte	81
 1560 006a 2E        		.byte	82
 1561 006b 3A        		.byte	83
 1562 006c 31        		.byte	55
 1563 006d 41        		.byte	84
 1564 006e 42        		.byte	85
 1565 006f 43        		.byte	86
 1566 0070 32        		.byte	56
 1567 0071 44        		.byte	87
 1568 0072 45        		.byte	88
 1569 0073 46        		.byte	89
 1570 0074 33        		.byte	90
 1571 0075 47        		.byte	57
 1572 0076 48        		.byte	48
 1573 0077 49        		.lcomm text_front,128
 1574 0078 34        		.lcomm text_back,128
 1575 0079 4A        		.lcomm text_front_p,2
 1576 007a 4B        		.lcomm text_back_p,2
 1577 007b 4C        		.lcomm window_position,2
 1578 007c 35        		.lcomm editor_state,1
 1579 007d 4D        		.lcomm pressed_key,2
 1580 007e 4E        		.lcomm char_ix,1
 1581 007f 4F        		.lcomm typing_mode,1
 1582 0080 36        		.comm refreshed,2,1
 1598               		.text
 1600               	.Letext0:
 1601               	.global __do_copy_data
 1602               	.global __do_clear_bss
 1603               	...
DEFINED SYMBOLS
                            *ABS*:00000000 editor.c
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:2      *ABS*:0000003f __SREG__
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:3      *ABS*:0000003e __SP_H__
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:4      *ABS*:0000003d __SP_L__
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:5      *ABS*:00000034 __CCP__
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:7      *ABS*:00000001 __zero_reg__
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:101    .text:00000000 cursor_shift_left
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1599   .bss:00000100 text_front_p
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1600   .bss:00000102 text_back_p
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1598   .bss:00000080 text_back
                             .bss:00000000 text_front
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1601   .bss:00000104 window_position
                            *COM*:00000002 refreshed
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:164    .text:0000005e cursor_shift_right
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:232    .text:000000c8 window_shift_left
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:275    .text:00000102 window_shift_right
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:321    .text:0000014c delete_char
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:380    .text:0000019a editor_maybe_switch_to_lower
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1605   .bss:0000010a typing_mode
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:410    .text:000001b4 editor_get_charkey_info
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1441   .eeprom:00000000 CHARS_MAPPINGS
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1477   .eeprom:00000020 DIGITS_MAPPINGS
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:480    .text:00000214 update_char
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1604   .bss:00000109 char_ix
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1557   .eeprom:00000068 UPPER_CHARS
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1513   .eeprom:00000040 LOWER_CHARS
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:536    .text:0000025e editor_handle_char_selection
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1602   .bss:00000106 editor_state
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1603   .bss:00000107 pressed_key
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:747    .text:00000378 insert_char
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:811    .text:000003d2 editor_handle_idle
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:985    .text:000004c2 editor_handle_key
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1054   .text:000004f4 editor_render_gui
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1209   .text:000005e4 editor_refresh
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1359   .text:000006be editor_init
C:\Users\Yellow\AppData\Local\Temp/ccnnXj8Y.s:1435   .data:00000018 TYPING_MODES

UNDEFINED SYMBOLS
__eerd_byte_m16
__divmodhi4
sprintf
lcd_set_position
lcd_display_string
lcd_display_control
lcd_init
lcd_clear
lcd_return_home
lcd_entry_mode_set
keyboard_init
keyboard_set_repeat_mask
keyboard_set_handler
__do_copy_data
__do_clear_bss
